{
  "url": "https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/deploy-tunnels/deployment-guides/terraform/#_top",
  "title": "Deploy Tunnels with TerraformTerraform - Cloudflare Zero Trust docsYesNoYesNo",
  "keyword": "",
  "content": "Skip to content          Cloudflare Docs            Search            Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n const r=\"starlight-theme\",o=e=>e===\"auto\"||e===\"dark\"||e===\"light\"?e:\"auto\",c=()=>o(typeof localStorage<\"u\"&&localStorage.getItem(r));function n(e){typeof localStorage<\"u\"&&localStorage.setItem(r,e===\"light\"||e===\"dark\"?e:\"\")}const l=()=>matchMedia(\"(prefers-color-scheme: light)\").matches?\"light\":\"dark\";function t(e){StarlightThemeProvider.updatePickers(e),document.documentElement.dataset.theme=e===\"auto\"?l():e,n(e)}matchMedia(\"(prefers-color-scheme: light)\").addEventListener(\"change\",()=>{c()===\"auto\"&&t(\"auto\")});class s extends HTMLElement{constructor(){super(),t(c()),this.querySelector(\"select\")?.addEventListener(\"change\",a=>{a.currentTarget instanceof HTMLSelectElement&&t(o(a.currentTarget.value))})}}customElements.define(\"starlight-theme-select\",s); class n extends HTMLElement{constructor(){super();const e=this.querySelector(\"select\");e&&e.addEventListener(\"change\",t=>{t.currentTarget instanceof HTMLSelectElement&&(window.location.pathname=t.currentTarget.value)})}}customElements.define(\"starlight-lang-select\",n);           class s extends HTMLElement{constructor(){super(),this.btn=this.querySelector(\"button\"),this.btn.addEventListener(\"click\",()=>this.toggleExpanded());const t=this.closest(\"nav\");t&&t.addEventListener(\"keyup\",e=>this.closeOnEscape(e))}setExpanded(t){this.setAttribute(\"aria-expanded\",String(t)),document.body.toggleAttribute(\"data-mobile-menu-expanded\",t)}toggleExpanded(){this.setExpanded(this.getAttribute(\"aria-expanded\")!==\"true\")}closeOnEscape(t){t.code===\"Escape\"&&(this.setExpanded(!1),this.btn.focus())}}customElements.define(\"starlight-menu-button\",s);              Cloudflare Zero Trust      \n\t\t(() => {\n\t\t\ttry {\n\t\t\t\tif (!matchMedia('(min-width: 50em)').matches) return;\n\t\t\t\t/** @type {HTMLElement | null} */\n\t\t\t\tconst target = document.querySelector('sl-sidebar-state-persist');\n\t\t\t\tconst state = JSON.parse(sessionStorage.getItem('sl-sidebar-state') || '0');\n\t\t\t\tif (!target || !state || target.dataset.hash !== state.hash) return;\n\t\t\t\twindow._starlightScrollRestore = state.scroll;\n\t\t\t\tcustomElements.define(\n\t\t\t\t\t'sl-sidebar-restore',\n\t\t\t\t\tclass SidebarRestore extends HTMLElement {\n\t\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst idx = parseInt(this.dataset.index || '');\n\t\t\t\t\t\t\t\tconst details = this.closest('details');\n\t\t\t\t\t\t\t\tif (details && typeof state.open[idx] === 'boolean') details.open = state.open[idx];\n\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch {}\n\t\t})();\n\t     Overview     Get started        Implementation guides         Secure your Internet traffic and SaaS apps ↗     Replace your VPN ↗     Deploy Zero Trust Web Access ↗            Identity         Overview     One-time PIN login        Device posture         Overview        WARP client checks         Overview     Application check     Carbon Black     Client certificate     Device serial numbers     Device UUID     Disk encryption     Domain joined     File check     Firewall     OS version     Require Gateway     Require WARP     SentinelOne            Service providers         Overview     CrowdStrike     Kolide     Microsoft Endpoint Manager     SentinelOne     Tanium     Uptycs     Workspace ONE            Access integrations         Overview     Mutual TLS     Tanium                User management         Overview     Access groups     Session management     Seat management     SCIM provisioning         Service tokens        Authorization cookie         Overview     Validate JWTs     Application token     CORS            SSO integration         Overview     Generic OIDC     Generic SAML 2.0     Active Directory (SAML)     Amazon Cognito     AWS IAM (SAML)     Centrify     Centrify (SAML)     Citrix ADC (SAML)     Facebook     GitHub     Google     Google Workspace     JumpCloud (SAML)     Keycloak (SAML)     LinkedIn     Microsoft Entra ID     Okta     Okta (SAML)     OneLogin     OneLogin (SAML)     PingFederate     PingOne     PingOne (SAML)     Signed AuthN requests (SAML)     Yandex                Connections         Overview        Cloudflare Tunnel         Overview        Get started         Overview     Create a remotely-managed tunnel (dashboard)     Create a locally-managed tunnel (CLI)     Useful terms            Downloads         Overview     Update cloudflared     License     Copyrights            Configure a tunnel         Overview     Remotely-managed tunnel        Locally-managed tunnel         Overview     Configuration file        Run as a service         Overview     Linux     macOS     Windows         Useful commands     Tunnel permissions         Origin configuration     Tunnel run parameters            Deploy a tunnel         Overview     Tunnel with firewall     Tunnel availability and failover     System requirements        Environments         Overview     Ansible     AWS     Azure     GCP     Kubernetes     Terraform                Use cases         Overview        SSH         Overview     SSH with Access for Infrastructure New     Self-managed SSH keys     Browser-rendered SSH terminal     SSH with client-side cloudflared         RDP     SMB     gRPC            Private networks         Overview        Connect private networks         Overview     Private DNS     Virtual networks     Load balancing         Peer-to-peer connectivity        WARP Connector         Overview Beta     Site-to-Internet     Site-to-site     User-to-site     VPC deployments                Public hostnames         Overview     DNS records     Load balancing            Monitor tunnels         Overview     Logs     Notifications     Metrics            Troubleshoot tunnels         Overview     Private network connectivity     Common errors            Do more with Tunnel         Overview     Migrate legacy tunnels     Quick Tunnels                Connect devices         Overview        WARP         Overview     First-time setup        Download WARP         Overview     Update WARP     Migrate 1.1.1.1 app            User-side certificates         Overview     Install certificate using WARP     Install certificate manually     Deploy custom certificate            Deploy WARP         Overview        Managed deployment         Overview        Partners         Overview     Fleet     Hexnode     Intune     Jamf     JumpCloud     Kandji         Parameters     Connect WARP before Windows login     Switch between Zero Trust organizations         Manual deployment     Device enrollment permissions     WARP with firewall     WARP with legacy VPN            Configure WARP         Overview     Device profiles        WARP modes         Overview     Enable Device Information Only            WARP settings         Overview     Captive portal detection         Managed networks        Route traffic         Overview     Local Domain Fallback     Split Tunnels     WARP architecture         WARP sessions            Troubleshoot WARP         Overview     Common issues     Client errors     Diagnostic logs     Known limitations         Remove WARP            Agentless options         Overview        DNS            Locations         Add locations     DNS resolver IPs and hostnames         DNS over TLS (DoT)     DNS over HTTPS (DoH)         HTTP                    Applications         Overview        Add web applications         Overview        SaaS applications         Overview     Generic OIDC application Beta     Generic SAML application     Adobe Acrobat Sign     Area 1     Asana     Atlassian Cloud     AWS     Braintree     Coupa     Digicert     DocuSign     Dropbox     GitHub Enterprise Cloud     Google Cloud     Google Workspace     Grafana     Grafana Cloud     Greenhouse Recruiting     Hubspot     Ironclad     Jamf Pro     Miro     PagerDuty     Pingboard     Salesforce (OIDC)     Salesforce (SAML)     ServiceNow (OIDC)     ServiceNow (SAML)     Slack     Smartsheet     SparkPost     Tableau Cloud     Workday     Zendesk     Zoom         Self-hosted applications     Cloudflare dashboard SSO application            Non-HTTP applications         Overview     Add an infrastructure application New     Browser-rendered terminal        Client-side cloudflared         Overview     Enable automatic cloudflared authentication     Arbitrary TCP         Short-lived certificates (legacy)            Scan SaaS applications         Overview     Manage findings        Available integrations         Overview     Amazon Web Services (AWS) S3     Atlassian Confluence     Atlassian Jira     Bitbucket Cloud     Box     Dropbox     GitHub        Google Workspace         Overview     Google Drive     Gmail     Google Admin     Google Calendar            Microsoft 365         Overview     Admin Center     OneDrive     SharePoint     Outlook         Salesforce     ServiceNow     Slack         Scan for sensitive data     Troubleshoot integrations         Login page     Block page     Add bookmarks     App Launcher            Policies         Overview        Secure Web Gateway         Overview        Get started         DNS filtering     Network filtering     HTTP filtering            DNS policies         Overview     Common policies     Test DNS filtering     Timed DNS policies            Network policies         Overview     Common policies     Protocol detection     SSH proxy and command logs            HTTP policies         Overview     Common policies     TLS decryption     HTTP/3     Tenant control     AV scanning     File sandboxing     WebSocket traffic            Egress policies         Overview     Dedicated egress IPs         Resolver policies Beta     Global policies     Applications and app types     Domain categories     Identity-based policies     Block page     Order of enforcement     Lists     Proxy            Access         Overview     Manage Access policies     Require Purpose Justification     External Evaluation rules     Isolate self-hosted application     Application paths     Enforce MFA     Temporary authentication            Browser Isolation         Overview        Set up Browser Isolation         Get started     Clientless Web Isolation     Non-identity on-ramps         Isolation policies     Extensions     Accessibility     Browser Isolation with firewall     Known limitations            Data Loss Prevention         Overview        Scan HTTP traffic         Create DLP policies     Common policies     Logging options         Scan SaaS apps ↗        DLP profiles         Configure DLP profiles     Predefined profiles     Integration profiles     Profile settings         DLP datasets                Insights            Analytics         Shadow IT Discovery     Gateway analytics            Email monitoring         Overview     Search email     Phishing report     Phish submissions            Digital Experience Monitoring         Overview Beta     Fleet status        Tests         Overview     HTTP test     Traceroute test     View test results         Remote captures     Notifications            Logs         Overview     User logs     Access audit logs        Gateway activity logs         Overview     Manage PII         Tunnel audit logs     Posture logs     Logpush integration         Risk score            Email Security         Overview        Setup         Overview        Post-delivery deployment            API deployment         Overview     Set up with Microsoft 365            BCC/Journaling            BCC setup         Microsoft Exchange BCC setup            Journaling setup         Office 365 journaling setup     Manually add domains     Manage domains                        Directories         Overview        Manage Microsoft directories         Overview     Manage groups in your directory     Manage users in your directory         Manage Email Security directories            Detection settings         Overview     Allow policies     Blocked senders     Trusted domains     Impersonation registry     Additional detections         Auto-move events     PhishGuard     Outbound Data Loss Prevention (DLP)        Reference         How Email Security detects phish     Information about your domain     Dispositions and attributes                API and Terraform         Overview        Access API examples         Overview     Access group     Any valid service token     Authentication method     Common name     Country Code     Email     Email domain     Everyone     G Suite Group     GitHub™ Organization     IP range     Microsoft Entra Group     mTLS certificate     Okta Group     SAML Attribute     Service token            Gateway API examples         Overview     DNS policy     Network policy     HTTP policy         Scoped API tokens     Terraform         Reference architecture ↗     Tutorials     Account limits     Roles and permissions     Glossary        Changelog         Overview     Access     Browser Isolation     CASB     Cloudflare Tunnel     Data Loss Prevention     Digital Experience Monitoring     Email Security     Gateway     Risk score     Zero Trust WARP Client         FAQ       \n\t\t(() => {\n\t\t\tconst scroller = document.getElementById('starlight__sidebar');\n\t\t\tif (!window._starlightScrollRestore || !scroller) return;\n\t\t\tscroller.scrollTop = window._starlightScrollRestore;\n\t\t\tdelete window._starlightScrollRestore;\n\t\t})();\n\t        Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n            const a=document.getElementById(\"starlight__sidebar\"),n=a?.querySelector(\"sl-sidebar-state-persist\"),o=\"sl-sidebar-state\",i=()=>{let t=[];const e=n?.dataset.hash||\"\";try{const s=sessionStorage.getItem(o),r=JSON.parse(s||\"{}\");Array.isArray(r.open)&&r.hash===e&&(t=r.open)}catch{}return{hash:e,open:t,scroll:a?.scrollTop||0}},c=t=>{try{sessionStorage.setItem(o,JSON.stringify(t))}catch{}},d=()=>c(i()),l=(t,e)=>{const s=i();s.open[e]=t,c(s)};n?.addEventListener(\"click\",t=>{if(!(t.target instanceof Element))return;const e=t.target.closest(\"summary\")?.closest(\"details\");if(!e)return;const s=e.querySelector(\"sl-sidebar-restore\"),r=parseInt(s?.dataset.index||\"\");isNaN(r)||l(!e.open,r)});addEventListener(\"visibilitychange\",()=>{document.visibilityState===\"hidden\"&&d()});addEventListener(\"pageHide\",d);    On this page    Overview     Prerequisites     1. Install Terraform     2. Install the gcloud CLI     3. Create a Cloudflare API token     4. Create a configuration directory     5. Create Terraform configuration files     Define input variables     Assign values to the variables     Configure Terraform providers     Configure Cloudflare resources     Configure GCP resources     Create a startup script        6. Deploy Terraform     7. Test the connection     On this page   Overview     Prerequisites     1. Install Terraform     2. Install the gcloud CLI     3. Create a Cloudflare API token     4. Create a configuration directory     5. Create Terraform configuration files     Define input variables     Assign values to the variables     Configure Terraform providers     Configure Cloudflare resources     Configure GCP resources     Create a startup script        6. Deploy Terraform     7. Test the connection         Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!                    Products        …       Cloudflare Zero Trust        Connections        Cloudflare Tunnel        Deploy a tunnel        Environments        Terraform        {\"@context\":\"https://schema.org\",\"@type\":\"BreadcrumbList\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"item\":{\"@id\":\"/products/\",\"name\":\"Products\"}},{\"@type\":\"ListItem\",\"position\":2,\"item\":{\"@id\":\"/cloudflare-one/\",\"name\":\"Cloudflare Zero Trust\"}},{\"@type\":\"ListItem\",\"position\":3,\"item\":{\"@id\":\"/cloudflare-one/connections/\",\"name\":\"Connections\"}},{\"@type\":\"ListItem\",\"position\":4,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-networks/\",\"name\":\"Cloudflare Tunnel\"}},{\"@type\":\"ListItem\",\"position\":5,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-networks/deploy-tunnels/\",\"name\":\"Deploy a tunnel\"}},{\"@type\":\"ListItem\",\"position\":6,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-networks/deploy-tunnels/deployment-guides/\",\"name\":\"Environments\"}},{\"@type\":\"ListItem\",\"position\":7,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-networks/deploy-tunnels/deployment-guides/terraform/\",\"name\":\"Terraform\"}}]} class t extends HTMLElement{constructor(){super(),this.isManualToggle=!1,this.breadcrumbs=null,this.mainBemClass=null,this.totalWidth=0,this.resizeObserver=null,this.handleTruncatedButtonClick=()=>{this.breadcrumbs?.classList.remove(\"is-truncated\"),this.isManualToggle=!0},this.mainBemClass=this.dataset.mainBemClass||null;const e=this.dataset.id;!(\"truncated\"in this.dataset)||!e||(this.breadcrumbs=document.getElementById(e),this.initializeCrumbs(),this.setupResizeObserver())}initializeCrumbs(){this.breadcrumbs?.querySelectorAll(`.${this.mainBemClass}__crumb`)?.forEach(s=>{this.totalWidth+=s.offsetWidth})}setupResizeObserver(){this.resizeObserver=new ResizeObserver(e=>{e.forEach(s=>{this.checkOverflow(s.target.clientWidth)})}),this.breadcrumbs&&this.resizeObserver.observe(this.breadcrumbs)}connectedCallback(){this.showHiddenCrumbs()}disconnectedCallback(){this.resizeObserver&&this.breadcrumbs&&(this.resizeObserver.unobserve(this.breadcrumbs),this.resizeObserver.disconnect())}toggleTruncated(e){this.breadcrumbs?.classList.toggle(\"is-truncated\",e)}showHiddenCrumbs(){const e=this.breadcrumbs?.querySelector(`.${this.mainBemClass}__truncated-button`);e?.removeEventListener(\"click\",this.handleTruncatedButtonClick),e?.addEventListener(\"click\",this.handleTruncatedButtonClick.bind(this))}checkOverflow(e){const s=this.totalWidth>e&&!this.isManualToggle;this.toggleTruncated(s),s||(this.isManualToggle=!1)}}customElements.get(\"astro-breadcrumbs\")||customElements.define(\"astro-breadcrumbs\",t);Terraform                             const L=\"starlight-image-zoom-zoomable\",w=window.requestIdleCallback??(y=>setTimeout(y,1));customElements.define(\"starlight-image-zoom\",class f extends HTMLElement{#t;#i=[];#o;#s=this.querySelector(\"template\");#e={image:\"starlight-image-zoom-image\",opened:\"starlight-image-zoom-opened\",source:\"starlight-image-zoom-source\",transition:\"starlight-image-zoom-transition\"};#r=\"zoomTransform\";static#u=!1;constructor(){super();const t=()=>{w(()=>{const e=[...document.querySelectorAll(L)];e.length!==0&&(this.#m(e),document.addEventListener(\"click\",this.#d),window.addEventListener(\"resize\",this.#a))})};window.addEventListener(\"DOMContentLoaded\",t,{once:!0}),document.addEventListener(\"astro:after-preparation\",()=>{document.removeEventListener(\"click\",this.#d),window.removeEventListener(\"resize\",this.#a)},{once:!0}),f.#u||=document.addEventListener(\"astro:after-swap\",t)===void 0}#m(t){for(const e of t){const n=e.querySelector(\"img\");n&&(this.#i.push(n),e.querySelector(\"button\")?.addEventListener(\"click\",i=>{i.stopPropagation(),this.#l(n)}))}}#d=({target:t})=>{if(!(t instanceof HTMLElement&&t.closest(\"figcaption\"))){if(this.#t){this.#n();return}t instanceof HTMLImageElement&&this.#i.includes(t)&&this.#l(t)}};#a=()=>{this.#n(!0)};#c=()=>{this.#n()};#p=t=>{t.preventDefault(),this.#n()};#l(t){if(!this.#s||this.#t)return;this.#o=document.activeElement;const e=document.createElement(\"div\");e.append(this.#s.content.cloneNode(!0));const n=e.querySelector(\"dialog\"),i=n?.querySelector(\"figure\");if(!n||!i)return;const r={overflow:document.body.style.overflow,width:document.body.style.width},d=document.body.clientWidth;document.body.style.overflow=\"hidden\",document.body.style.width=`${d}px`,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",`calc(var(--sl-nav-pad-x) + ${window.innerWidth-d}px)`);const s=this.#f(t);t.classList.add(this.#e.source),s.classList.add(this.#e.image),i.append(s),this.#w(t.getAttribute(\"alt\"),i),document.body.append(e),document.addEventListener(\"wheel\",this.#c,{once:!0}),n.addEventListener(\"cancel\",this.#p),n.showModal(),w(()=>{s.style.transform=\"\",document.body.classList.add(this.#e.opened)}),this.#t={body:r,dialog:n,image:t,zoomedImage:s}}#n(t=!1){if(window.removeEventListener(\"wheel\",this.#c),!this.#t)return;const{zoomedImage:e}=this.#t;e.style.transform=e.dataset[this.#r]??\"\",document.body.classList.add(this.#e.transition),document.body.classList.remove(this.#e.opened);const{matches:n}=window.matchMedia(\"(prefers-reduced-motion: reduce)\");t||n?this.#h():e.addEventListener(\"transitionend\",this.#h,{once:!0})}#h=()=>{if(!this.#t)return;const{dialog:t,image:e}=this.#t;document.body.classList.remove(this.#e.transition),e.classList.remove(this.#e.source),t.parentElement?.remove(),document.body.style.overflow=this.#t.body.overflow,document.body.style.width=this.#t.body.width,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",\"var(--sl-nav-pad-x)\"),this.#t=void 0,this.#o instanceof HTMLElement&&this.#o.focus()};#w(t,e){if(Object.hasOwn(this.dataset,\"hideCaption\")||(t=t?.trim()??\"\",t.length===0))return;const n=document.createElement(\"figcaption\");n.ariaHidden=\"true\",n.textContent=t,e.append(n)}#f(t){const e=t.getBoundingClientRect(),n=this.#y(t),i=n?window.innerWidth:t.naturalWidth,r=n?window.innerHeight:t.naturalHeight,d=Math.min(window.innerWidth,i),s=Math.min(window.innerHeight,r),l=Math.min(d/i,s/r),a=(n?window.innerWidth:t.naturalWidth)*l,c=(n?window.innerHeight:t.naturalHeight)*l,h=(window.innerHeight-c)/2,u=(window.innerWidth-a)/2,o=t.cloneNode(!0);o.removeAttribute(\"id\"),o.style.position=\"absolute\",o.style.width=`${a}px`,o.style.height=`${c}px`,o.style.top=`${h}px`,o.style.left=`${u}px`,o.style.transform=\"\";const m=e.width/a,p=e.height/c,g=(-u+(e.width-a)/2+e.left)/m,v=(-h+(e.height-c)/2+e.top)/p;return o.style.transform=`scale(${m}, ${p}) translate3d(${g}px, ${v}px, 0)`,o.dataset[this.#r]=o.style.transform,t.parentElement?.tagName===\"PICTURE\"&&t.currentSrc&&(o.src=t.currentSrc),o}#y(t){return t.currentSrc.toLowerCase().endsWith(\".svg\")}});  Terraform ↗ is an infrastructure as code software tool that allows you to deploy services from different providers using a standardized configuration syntax. When creating a Terraform configuration file, you define the final state of the configuration rather than the step-by-step procedure. This allows you to easily deploy, modify, and manage your Tunnels alongside your other infrastructure.\nIn this guide, you will use Terraform to deploy:\n\nA Google Cloud Project (GCP) virtual machine that runs an HTTP test server\nA Cloudflare Tunnel that makes the server available over the Internet\nA Cloudflare Access policy that defines who can connect to the server\n\nPrerequisites\nTo complete the following procedure, you will need:\n\nA Google Cloud Project ↗\nA zone on Cloudflare\n\n1. Install Terraform\nRefer to the Terraform installation guide ↗ for your operating system.\n2. Install the gcloud CLI\n\n\nInstall the gcloud CLI ↗ so that Terraform can interact with your GCP account.\n\n\nAuthenticate with the CLI by running:\nTerminal windowgcloud auth application-default login\n\n\n3. Create a Cloudflare API token\nCreate an API token so that Terraform can interact with your Cloudflare account. At minimum, your token should include the following permissions:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPermission typePermissionAccess levelAccountCloudflare TunnelEditAccountAccess: Apps and PoliciesEditZoneDNSEdit\n4. Create a configuration directory\nTerraform functions through a working directory that contains configuration files. You can store your configuration in multiple files or just one — Terraform will evaluate all of the configuration files in the directory as if they were in a single document.\n\n\nCreate a folder for your Terraform configuration:\nTerminal windowmkdir cloudflare-tf\n\n\nChange into the directory:\nTerminal windowcd cloudflare-tf\n\n\n5. Create Terraform configuration files\nDefine input variables\nThe following variables will be passed into your GCP and Cloudflare configuration.\n\n\nIn your configuration directory, create a .tf file:\nTerminal windowtouch variables.tf\n\n\nOpen the file in a text editor and copy and paste the following:\n# GCP variablesvariable \"gcp_project_id\" {  description = \"Google Cloud Platform (GCP) project ID\"  type        = string}\nvariable \"zone\" {  description = \"Geographical zone for the GCP VM instance\"  type        = string}\nvariable \"machine_type\" {  description = \"Machine type for the GCP VM instance\"  type        = string}\n# Cloudflare variablesvariable \"cloudflare_zone\" {  description = \"Domain used to expose the GCP VM instance to the Internet\"  type        = string}\nvariable \"cloudflare_zone_id\" {  description = \"Zone ID for your domain\"  type        = string}\nvariable \"cloudflare_account_id\" {  description = \"Account ID for your Cloudflare account\"  type        = string  sensitive   = true}\nvariable \"cloudflare_email\" {  description = \"Email address for your Cloudflare account\"  type        = string  sensitive   = true}\nvariable \"cloudflare_token\" {  description = \"Cloudflare API token created at https://dash.cloudflare.com/profile/api-tokens\"  type        = string  sensitive   = true}\n\n\nAssign values to the variables\n\n\nIn your configuration directory, create a .tfvars file:\nTerminal windowtouch terraform.tfvars\nTerraform will automatically use these variables if the file is named terraform.tfvars, otherwise the variable file will need to be manually passed in.\n\n\nAdd the following variables to terraform.tfvars. Be sure to modify the example with your own values.\ncloudflare_zone           = \"example.com\"cloudflare_zone_id        = \"023e105f4ecef8ad9ca31a8372d0c353\"cloudflare_account_id     = \"372e67954025e0ba6aaa6d586b9e0b59\"cloudflare_email          = \"user@example.com\"cloudflare_token          = \"y3AalHS_E7Vabk3c3lX950F90_Xl7YtjSlzyFn_X\"gcp_project_id            = \"testvm-123\"zone                      = \"us-central1-a\"machine_type              = \"e2-medium\"\n\n\nWarningTo prevent accidentally exposing sensitive credentials, do not save terraform.tfvars in your version control system. For example, if your version control is git, add terraform.tfvars to your .gitignore file.\nConfigure Terraform providers\nYou will need to declare the providers ↗ used to provision the infrastructure.\n\n\nIn your configuration directory, create a .tf file:\nTerminal windowtouch providers.tf\n\n\nAdd the following providers to providers.tf. The random provider is used to generate a tunnel secret.\nterraform {  required_providers {    cloudflare = {      source = \"cloudflare/cloudflare\"      version = \">= 4.40.0\"    }    google = {      source = \"hashicorp/google\"    }    random = {      source = \"hashicorp/random\"    }  }  required_version = \">= 1.2\"}\n# Providersprovider \"cloudflare\" {  api_token    = var.cloudflare_token}provider \"google\" {  project    = var.gcp_project_id}provider \"random\" {}\n\n\nConfigure Cloudflare resources\nThe following configuration will modify settings in your Cloudflare account.\n\n\nIn your configuration directory, create a .tf file:\nTerminal windowtouch Cloudflare-config.tf\n\n\nAdd the following resources to Cloudflare-config.tf:\n# Generates a 64-character secret for the tunnel.# Using `random_password` means the result is treated as sensitive and, thus,# not displayed in console output. Refer to: https://registry.terraform.io/providers/hashicorp/random/latest/docs/resources/passwordresource \"random_password\" \"tunnel_secret\" {  length = 64}\n# Creates a new locally-managed tunnel for the GCP VM.resource \"cloudflare_zero_trust_tunnel_cloudflared\" \"auto_tunnel\" {  account_id = var.cloudflare_account_id  name       = \"Terraform GCP tunnel\"  secret     = base64sha256(random_password.tunnel_secret.result)}\n# Creates the CNAME record that routes http_app.${var.cloudflare_zone} to the tunnel.resource \"cloudflare_record\" \"http_app\" {  zone_id = var.cloudflare_zone_id  name    = \"http_app\"  content   = \"${cloudflare_zero_trust_tunnel_cloudflared.auto_tunnel.cname}\"  type    = \"CNAME\"  proxied = true}\n# Creates the configuration for the tunnel.resource \"cloudflare_zero_trust_tunnel_cloudflared_config\" \"auto_tunnel\" {  tunnel_id = cloudflare_zero_trust_tunnel_cloudflared.auto_tunnel.id  account_id = var.cloudflare_account_id  config {   ingress_rule {     hostname = \"${cloudflare_record.http_app.hostname}\"     service  = \"http://httpbin:8080\"     origin_request {       connect_timeout = \"2m0s\"       access {         required  = true         team_name = \"myteam\"         aud_tag   = [cloudflare_zero_trust_access_application.http_app.aud]       }     }   }   ingress_rule {     service  = \"http_status:404\"   }  }}\n# Creates an Access application to control who can connect.resource \"cloudflare_zero_trust_access_application\" \"http_app\" {  zone_id          = var.cloudflare_zone_id  name             = \"Access application for http_app.${var.cloudflare_zone}\"  domain           = \"http_app.${var.cloudflare_zone}\"  session_duration = \"1h\"}\n# Creates an Access policy for the application.resource \"cloudflare_zero_trust_access_policy\" \"http_policy\" {  application_id = cloudflare_zero_trust_access_application.http_app.id  zone_id        = var.cloudflare_zone_id  name           = \"Example policy for http_app.${var.cloudflare_zone}\"  precedence     = \"1\"  decision       = \"allow\"  include {    email = [var.cloudflare_email]  }}\nTo learn more about these resources, refer to the Cloudflare provider documentation ↗.\n\n\nConfigure GCP resources\nThe following configuration defines the specifications for the GCP virtual machine and creates a startup script to run upon boot.\n\n\nIn your configuration directory, create a .tf file:\nTerminal windowtouch GCP-config.tf\n\n\nAdd the following content to GCP-config.tf:\n# Selects the OS for the GCP VM.data \"google_compute_image\" \"image\" {  family  = \"ubuntu-minimal-2004-lts\"  project = \"ubuntu-os-cloud\"}\n# Sets up a GCP VM instance.resource \"google_compute_instance\" \"origin\" {  name         = \"test\"  machine_type = var.machine_type  zone         = var.zone  tags         = []  boot_disk {    initialize_params {      image = data.google_compute_image.image.self_link    }  }\n  network_interface {    network = \"default\"    access_config {      // Ephemeral IP    }  }  // Optional config to make the instance ephemeral  scheduling {    preemptible       = true    automatic_restart = false  }  // Configures the VM to run a startup script that takes in the Terraform variables.  metadata_startup_script = templatefile(\"./install-tunnel.tpl\",    {      tunnel_token = cloudflare_zero_trust_tunnel_cloudflared.auto_tunnel.tunnel_token    })}\n\n\nCreate a startup script\nThe following script will install cloudflared, create a permissions and configuration file for the tunnel, and set up the tunnel to run as a service. This example also installs a lightweight HTTP application that you can use to test connectivity.\n\n\nIn your configuration directory, create a Terraform template file:\nTerminal windowtouch install-tunnel.tftpl\n\n\nOpen the file in a text editor and copy and paste the following bash script:\nTerminal window# Script to install Cloudflare Tunnel and Docker resources\n# Docker configurationcd /tmpsudo apt-get install software-properties-common# Retrieving the docker repository for this OScurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable\"# The OS is updated and docker is installedsudo apt update -y && sudo apt upgrade -ysudo apt install docker docker-compose -y# Add the HTTPBin application and run it on localhost:8080.cat > /tmp/docker-compose.yml << \"EOF\"version: '3'services:  httpbin:    image: kennethreitz/httpbin    restart: always    container_name: httpbin    ports:      - 8080:80\n  cloudflared:    image: cloudflare/cloudflared:latest    restart: always    container_name: cloudflared    command: tunnel run --token ${tunnel_token}EOFcd /tmpsudo docker-compose up -d\n\n\n6. Deploy Terraform\nTo deploy the configuration files:\n\n\nInitialize your configuration directory:\nTerminal windowterraform init\n\n\nPreview everything that will be created:\nTerminal windowterraform plan\n\n\nApply the configuration:\nTerminal windowterraform apply\n\n\nIt may take several minutes for the GCP instance and tunnel to come online. You can view your new tunnel, Access application, and Access policy in Zero Trust ↗. The new DNS records are available in the Cloudflare dashboard ↗.\nNoteIf you need to roll back the configuration, run terraform destroy to delete everything created through Terraform. Both terraform apply and terraform destroy prompt for user input before applying the changes. To run without requiring user input, you can add the -auto-approve flag to the command.\n7. Test the connection\n\n\nIn Networks > Tunnels, verify that your tunnel is active.\n\n\nIn Access > Applications, verify that your Cloudflare email is allowed by the Access policy.\n\n\nFrom any device, open a browser and go to http_app.<cloudflare_zone> (for example, http_app.example.com).\nYou will see the Access login page if you have not recently logged in.\n\n\nLog in with your Cloudflare email.\nYou should see the HTTPBin ↗ homepage.\n\n     Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!    class r extends HTMLElement{connectedCallback(){const d={'[data-icon=\"material-symbols:thumb-up-outline-rounded\"]':\"#feedback-yes\",'[data-icon=\"material-symbols:thumb-down-outline-rounded\"]':\"#feedback-no\"},s=this.querySelector(\"#feedback-thumbs\"),o=this.querySelector(\"#feedback-thanks\");if(!(!s||!o))for(const[i,n]of Object.entries(d))this.querySelector(i)?.addEventListener(\"click\",()=>{s.classList.add(\"hidden\");const e=this.querySelector(n);if(!e)return;e.classList.remove(\"hidden\");const a=e.querySelector(\"form\");a&&a.addEventListener(\"submit\",async c=>{c.preventDefault();const t=new FormData(c.target);t.set(\"page\",window.location.pathname),t.set(\"option\",n.split(\"-\")[1]),fetch(\"https://feedback.developers.cloudflare.com\",{method:\"POST\",body:t}),e.classList.add(\"hidden\"),o.classList.remove(\"hidden\")})})}}customElements.define(\"feedback-prompt\",r);       Edit page          Cloudflare DashboardDiscordCommunityLearning CenterSupport Portal\n\t\t\t\tfunction OptanonWrapper() {}\n\t\t\t  Cookie Settings",
  "custom_id": "AoiFuVvbZNrfRvoozsufyfs5pa1QtmEHYplrW68KVaFIYMZNzDEXKv6mZ4sHGHwp"
}