{
  "url": "https://developers.cloudflare.com/learning-paths/secure-internet-traffic/build-http-policies/tls-inspection/#_top",
  "title": "Use TLS inspection - Cloudflare Learning PathsYesNoYesNo",
  "keyword": "",
  "content": "Skip to content          Cloudflare Docs            Search            Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n const r=\"starlight-theme\",o=e=>e===\"auto\"||e===\"dark\"||e===\"light\"?e:\"auto\",c=()=>o(typeof localStorage<\"u\"&&localStorage.getItem(r));function n(e){typeof localStorage<\"u\"&&localStorage.setItem(r,e===\"light\"||e===\"dark\"?e:\"\")}const l=()=>matchMedia(\"(prefers-color-scheme: light)\").matches?\"light\":\"dark\";function t(e){StarlightThemeProvider.updatePickers(e),document.documentElement.dataset.theme=e===\"auto\"?l():e,n(e)}matchMedia(\"(prefers-color-scheme: light)\").addEventListener(\"change\",()=>{c()===\"auto\"&&t(\"auto\")});class s extends HTMLElement{constructor(){super(),t(c()),this.querySelector(\"select\")?.addEventListener(\"change\",a=>{a.currentTarget instanceof HTMLSelectElement&&t(o(a.currentTarget.value))})}}customElements.define(\"starlight-theme-select\",s); class n extends HTMLElement{constructor(){super();const e=this.querySelector(\"select\");e&&e.addEventListener(\"change\",t=>{t.currentTarget instanceof HTMLSelectElement&&(window.location.pathname=t.currentTarget.value)})}}customElements.define(\"starlight-lang-select\",n);           class s extends HTMLElement{constructor(){super(),this.btn=this.querySelector(\"button\"),this.btn.addEventListener(\"click\",()=>this.toggleExpanded());const t=this.closest(\"nav\");t&&t.addEventListener(\"keyup\",e=>this.closeOnEscape(e))}setExpanded(t){this.setAttribute(\"aria-expanded\",String(t)),document.body.toggleAttribute(\"data-mobile-menu-expanded\",t)}toggleExpanded(){this.setExpanded(this.getAttribute(\"aria-expanded\")!==\"true\")}closeOnEscape(t){t.code===\"Escape\"&&(this.setExpanded(!1),this.btn.focus())}}customElements.define(\"starlight-menu-button\",s);              Secure your Internet traffic and SaaS apps (Learning Paths)      \n\t\t(() => {\n\t\t\ttry {\n\t\t\t\tif (!matchMedia('(min-width: 50em)').matches) return;\n\t\t\t\t/** @type {HTMLElement | null} */\n\t\t\t\tconst target = document.querySelector('sl-sidebar-state-persist');\n\t\t\t\tconst state = JSON.parse(sessionStorage.getItem('sl-sidebar-state') || '0');\n\t\t\t\tif (!target || !state || target.dataset.hash !== state.hash) return;\n\t\t\t\twindow._starlightScrollRestore = state.scroll;\n\t\t\t\tcustomElements.define(\n\t\t\t\t\t'sl-sidebar-restore',\n\t\t\t\t\tclass SidebarRestore extends HTMLElement {\n\t\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst idx = parseInt(this.dataset.index || '');\n\t\t\t\t\t\t\t\tconst details = this.closest('details');\n\t\t\t\t\t\t\t\tif (details && typeof state.open[idx] === 'boolean') details.open = state.open[idx];\n\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch {}\n\t\t})();\n\t        Overview         Overview     What security features does Cloudflare provide?            Get started with Zero Trust         Overview     Prerequisites     Create a Cloudflare account     Create a Zero Trust organization     Configure an identity provider            Connect devices and networks to Cloudflare         Overview     Choose an on-ramp     Download and install WARP     MDM deployment     Verify device connectivity            Configure the device agent         Overview     Define device enrollment permissions     Customize device profiles     Proxy traffic through Gateway     Define Split Tunnel settings     Resolve private DNS     Determine when to use PAC files            Understand and streamline policy creation         Overview     Order of enforcement     Create a list of IPs or domains     Use indicator feeds to improve security policies            Build DNS security policies         Overview     Create your first DNS policy     Create an allowlist or blocklist     Recommended DNS policies     Onboard DNS for a network     Test a policy            Build network security policies         Overview     Create your first network policy     Recommended network policies            Build HTTP security policies         Overview     Use TLS inspection     Create your first HTTP policy     Build Data Loss Prevention (DLP) policies     Configure Browser Isolation     Recommended HTTP policies            Control traffic egress with source IP anchoring and allowlisting         Overview     Source IP anchoring     Egress IP best practices     Use egress policies to deliver consistent egress IPs            Secure SaaS applications         Overview     SaaS security overview     Single sign-on front door controls     Layer security methods     Scan SaaS applications with Cloudflare CASB           \n\t\t(() => {\n\t\t\tconst scroller = document.getElementById('starlight__sidebar');\n\t\t\tif (!window._starlightScrollRestore || !scroller) return;\n\t\t\tscroller.scrollTop = window._starlightScrollRestore;\n\t\t\tdelete window._starlightScrollRestore;\n\t\t})();\n\t        Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n            const a=document.getElementById(\"starlight__sidebar\"),n=a?.querySelector(\"sl-sidebar-state-persist\"),o=\"sl-sidebar-state\",i=()=>{let t=[];const e=n?.dataset.hash||\"\";try{const s=sessionStorage.getItem(o),r=JSON.parse(s||\"{}\");Array.isArray(r.open)&&r.hash===e&&(t=r.open)}catch{}return{hash:e,open:t,scroll:a?.scrollTop||0}},c=t=>{try{sessionStorage.setItem(o,JSON.stringify(t))}catch{}},d=()=>c(i()),l=(t,e)=>{const s=i();s.open[e]=t,c(s)};n?.addEventListener(\"click\",t=>{if(!(t.target instanceof Element))return;const e=t.target.closest(\"summary\")?.closest(\"details\");if(!e)return;const s=e.querySelector(\"sl-sidebar-restore\"),r=parseInt(s?.dataset.index||\"\");isNaN(r)||l(!e.open,r)});addEventListener(\"visibilitychange\",()=>{document.visibilityState===\"hidden\"&&d()});addEventListener(\"pageHide\",d);    On this page    Overview     Get started     1. Identify your goals     2. Turn on TLS inspection     3. Determine the certificate used for inspection     4. Build a baseline Do Not Inspect policy     5. Build the necessary pass-through rules        On this page   Overview     Get started     1. Identify your goals     2. Turn on TLS inspection     3. Determine the certificate used for inspection     4. Build a baseline Do Not Inspect policy     5. Build the necessary pass-through rules            Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!                    Products        â€¦       Learning Paths        Secure your Internet traffic and SaaS apps        Build HTTP security policies        Use TLS inspection        {\"@context\":\"https://schema.org\",\"@type\":\"BreadcrumbList\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"item\":{\"@id\":\"/products/\",\"name\":\"Products\"}},{\"@type\":\"ListItem\",\"position\":2,\"item\":{\"@id\":\"/learning-paths/\",\"name\":\"Learning Paths\"}},{\"@type\":\"ListItem\",\"position\":3,\"item\":{\"@id\":\"/learning-paths/secure-internet-traffic/\",\"name\":\"Secure your Internet traffic and SaaS apps\"}},{\"@type\":\"ListItem\",\"position\":4,\"item\":{\"@id\":\"/learning-paths/secure-internet-traffic/build-http-policies/\",\"name\":\"Build HTTP security policies\"}},{\"@type\":\"ListItem\",\"position\":5,\"item\":{\"@id\":\"/learning-paths/secure-internet-traffic/build-http-policies/tls-inspection/\",\"name\":\"Use TLS inspection\"}}]} class t extends HTMLElement{constructor(){super(),this.isManualToggle=!1,this.breadcrumbs=null,this.mainBemClass=null,this.totalWidth=0,this.resizeObserver=null,this.handleTruncatedButtonClick=()=>{this.breadcrumbs?.classList.remove(\"is-truncated\"),this.isManualToggle=!0},this.mainBemClass=this.dataset.mainBemClass||null;const e=this.dataset.id;!(\"truncated\"in this.dataset)||!e||(this.breadcrumbs=document.getElementById(e),this.initializeCrumbs(),this.setupResizeObserver())}initializeCrumbs(){this.breadcrumbs?.querySelectorAll(`.${this.mainBemClass}__crumb`)?.forEach(s=>{this.totalWidth+=s.offsetWidth})}setupResizeObserver(){this.resizeObserver=new ResizeObserver(e=>{e.forEach(s=>{this.checkOverflow(s.target.clientWidth)})}),this.breadcrumbs&&this.resizeObserver.observe(this.breadcrumbs)}connectedCallback(){this.showHiddenCrumbs()}disconnectedCallback(){this.resizeObserver&&this.breadcrumbs&&(this.resizeObserver.unobserve(this.breadcrumbs),this.resizeObserver.disconnect())}toggleTruncated(e){this.breadcrumbs?.classList.toggle(\"is-truncated\",e)}showHiddenCrumbs(){const e=this.breadcrumbs?.querySelector(`.${this.mainBemClass}__truncated-button`);e?.removeEventListener(\"click\",this.handleTruncatedButtonClick),e?.addEventListener(\"click\",this.handleTruncatedButtonClick.bind(this))}checkOverflow(e){const s=this.totalWidth>e&&!this.isManualToggle;this.toggleTruncated(s),s||(this.isManualToggle=!1)}}customElements.get(\"astro-breadcrumbs\")||customElements.define(\"astro-breadcrumbs\",t);Use TLS inspection                             const L=\"starlight-image-zoom-zoomable\",w=window.requestIdleCallback??(y=>setTimeout(y,1));customElements.define(\"starlight-image-zoom\",class f extends HTMLElement{#t;#i=[];#o;#s=this.querySelector(\"template\");#e={image:\"starlight-image-zoom-image\",opened:\"starlight-image-zoom-opened\",source:\"starlight-image-zoom-source\",transition:\"starlight-image-zoom-transition\"};#r=\"zoomTransform\";static#u=!1;constructor(){super();const t=()=>{w(()=>{const e=[...document.querySelectorAll(L)];e.length!==0&&(this.#m(e),document.addEventListener(\"click\",this.#d),window.addEventListener(\"resize\",this.#a))})};window.addEventListener(\"DOMContentLoaded\",t,{once:!0}),document.addEventListener(\"astro:after-preparation\",()=>{document.removeEventListener(\"click\",this.#d),window.removeEventListener(\"resize\",this.#a)},{once:!0}),f.#u||=document.addEventListener(\"astro:after-swap\",t)===void 0}#m(t){for(const e of t){const n=e.querySelector(\"img\");n&&(this.#i.push(n),e.querySelector(\"button\")?.addEventListener(\"click\",i=>{i.stopPropagation(),this.#l(n)}))}}#d=({target:t})=>{if(!(t instanceof HTMLElement&&t.closest(\"figcaption\"))){if(this.#t){this.#n();return}t instanceof HTMLImageElement&&this.#i.includes(t)&&this.#l(t)}};#a=()=>{this.#n(!0)};#c=()=>{this.#n()};#p=t=>{t.preventDefault(),this.#n()};#l(t){if(!this.#s||this.#t)return;this.#o=document.activeElement;const e=document.createElement(\"div\");e.append(this.#s.content.cloneNode(!0));const n=e.querySelector(\"dialog\"),i=n?.querySelector(\"figure\");if(!n||!i)return;const r={overflow:document.body.style.overflow,width:document.body.style.width},d=document.body.clientWidth;document.body.style.overflow=\"hidden\",document.body.style.width=`${d}px`,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",`calc(var(--sl-nav-pad-x) + ${window.innerWidth-d}px)`);const s=this.#f(t);t.classList.add(this.#e.source),s.classList.add(this.#e.image),i.append(s),this.#w(t.getAttribute(\"alt\"),i),document.body.append(e),document.addEventListener(\"wheel\",this.#c,{once:!0}),n.addEventListener(\"cancel\",this.#p),n.showModal(),w(()=>{s.style.transform=\"\",document.body.classList.add(this.#e.opened)}),this.#t={body:r,dialog:n,image:t,zoomedImage:s}}#n(t=!1){if(window.removeEventListener(\"wheel\",this.#c),!this.#t)return;const{zoomedImage:e}=this.#t;e.style.transform=e.dataset[this.#r]??\"\",document.body.classList.add(this.#e.transition),document.body.classList.remove(this.#e.opened);const{matches:n}=window.matchMedia(\"(prefers-reduced-motion: reduce)\");t||n?this.#h():e.addEventListener(\"transitionend\",this.#h,{once:!0})}#h=()=>{if(!this.#t)return;const{dialog:t,image:e}=this.#t;document.body.classList.remove(this.#e.transition),e.classList.remove(this.#e.source),t.parentElement?.remove(),document.body.style.overflow=this.#t.body.overflow,document.body.style.width=this.#t.body.width,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",\"var(--sl-nav-pad-x)\"),this.#t=void 0,this.#o instanceof HTMLElement&&this.#o.focus()};#w(t,e){if(Object.hasOwn(this.dataset,\"hideCaption\")||(t=t?.trim()??\"\",t.length===0))return;const n=document.createElement(\"figcaption\");n.ariaHidden=\"true\",n.textContent=t,e.append(n)}#f(t){const e=t.getBoundingClientRect(),n=this.#y(t),i=n?window.innerWidth:t.naturalWidth,r=n?window.innerHeight:t.naturalHeight,d=Math.min(window.innerWidth,i),s=Math.min(window.innerHeight,r),l=Math.min(d/i,s/r),a=(n?window.innerWidth:t.naturalWidth)*l,c=(n?window.innerHeight:t.naturalHeight)*l,h=(window.innerHeight-c)/2,u=(window.innerWidth-a)/2,o=t.cloneNode(!0);o.removeAttribute(\"id\"),o.style.position=\"absolute\",o.style.width=`${a}px`,o.style.height=`${c}px`,o.style.top=`${h}px`,o.style.left=`${u}px`,o.style.transform=\"\";const m=e.width/a,p=e.height/c,g=(-u+(e.width-a)/2+e.left)/m,v=(-h+(e.height-c)/2+e.top)/p;return o.style.transform=`scale(${m}, ${p}) translate3d(${g}px, ${v}px, 0)`,o.dataset[this.#r]=o.style.transform,t.parentElement?.tagName===\"PICTURE\"&&t.currentSrc&&(o.src=t.currentSrc),o}#y(t){return t.currentSrc.toLowerCase().endsWith(\".svg\")}});  TLS inspection (also known as TLS decryption or HTTPS inspection) allows Cloudflare Gateway to perform deeper traffic analysis and take actions like scanning request bodies for sensitive data, upgrading to a remote browser isolation session, and redirecting based on the complete URL and path of requests.\nTLS inspection is desirable for security policy involving users accessing sensitive systems, but it can also present challenges. Without TLS inspection turned on, policies can still use user identity, device posture, IP address, resolved domain, SNI, and a number of other attributes that support a Zero Trust security implementation.\nOrganizations are often hesitant to adopt TLS inspection practices due to concerns about interoperability with existing systems due to past experiences with legacy systems that conceptually worked in the same way. However, Cloudflare's approach to TLS inspection is capable, performant, modern, and above all, flexible. We understand that it is never possible to inspect absolutely all traffic â€” something will always break. Our recommendations keep this practical reality in mind.\nGet started\nTo decide why and how you should turn on TLS inspection, we recommend you start with the following steps:\n1. Identify your goals\nCloudflare Zero Trust requires TLS inspection for most advanced security and data loss prevention (DLP) features.\nSome security organizations choose to avoid TLS inspection due to concerns about user privacy and acceptable use. This is an important and sometimes complicated organization decision, but you can simplify it by establishing goals related to your security practices. Questions to consider:\n\nIs your organizational use of TLS inspection designed to protect from the \"known\" (such as sensitive data in corporate-sanctioned SaaS applications) or the \"unknown\" (such as users downloading or uploading files to brand-new blob storage buckets)?\nDo you intend to primarily block by domain or hostname or by building policies for complete URLs?\nDo you plan to scan the body of requests or files against DLP profiles or scan downloaded files with an antivirus or anti-malware engine?\nDo you intend to use inline Remote Browser Isolation to take advantage of data security capabilities like copy/paste blocking, keyboard blocking, and print blocking?\n\nIf the answer to a majority of these questions is no and your organization relies mostly on hostname or DNS-based security controls, then you may not need to inspect most, if not all TLS traffic. Because Cloudflare operates both as a secure web gateway and as a secure DNS resolver for your connected users, you can apply policy control that may increase your security posture without the need to broadly inspect TLS traffic.\n2. Turn on TLS inspection\nTo turn on TLS inspection for your Zero Trust organization:\n\nIn Zero Trust â†—, go to Settings > Network.\nTurn on TLS decryption.\n\n3. Determine the certificate used for inspection\nTLS inspection requires a trusted private root certificate to be able to inspect and filter encrypted traffic. A Cloudflare root certificate is a simple and common solution that is usually appropriate for testing or proof-of-concept conditions when deployed to your devices.\nAlternatively, if you already have a root CA that you use for other inspection or trust applications, we recommend using your own certificate. A few reasons for this include:\n\nAssuming the root certificate is already deployed on the relevant fleet of devices, using a single certificate streamlines your IT management.\nIf external services like Git workflows or CLI tools rely on an existing certificate store, presenting the same certificate in inspection is far less likely to interrupt their traffic flow, although these are things that you may wish to exempt from inspection.\nIf you are using WARP Connector or a Magic WAN IPsec/GRE tunnel to on-ramp traffic to Cloudflare, devices behind those tunnels will not be able to use HTTP policies that require TLS inspection unless they have a certificate that matches your organization's certificate of choice. Your network infrastructure most likely already has your own device certificates deployed, so using your own existing public key infrastructure for inspection will simplify protection.\n\n4. Build a baseline Do Not Inspect policy\nDo you want to inspect all traffic by default, or do you only want to inspect explicit destinations? We recommend that you build a Gateway list of applications and endpoints to exclude from inspection and add the list as an OR operator in addition to our existing Do Not Inspect application group. For example:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelectorOperatorValueLogicActionApplicationinDo Not InspectOrDo Not InspectHostin listTrusted Hostnames\nIf your organization is newly adopting the security framework that requires TLS inspection, we recommend starting minimally. In fact, it may even be appropriate to choose to only explicitly inspect a predetermined list of hostnames, IPs, or specific user groups or device types and forego inspection for everything else during the initial deployment stage. Cloudflare has a unique and flexible approach to where and when you can deploy inspection, meaning it can be as limited and granular as your organization needs without impacting device routing tables or other memory-sensitive local constructs.\n5. Build the necessary pass-through rules\nYou can build pass-through rules to accommodate any type of device or user group that should not be subject to inspection.\nFor example, if users are issued a corporate-managed iPhone with limited permissions, set an additional Do Not Inspect policy for all traffic matching the device posture value. That could include the OS type, OS version, or a list of serial numbers (updated via the API with hooks from your MDM tool) for those iPhones:\n\n(() => {\n\tclass StarlightTabsRestore extends HTMLElement {\n\t\tconnectedCallback() {\n\t\t\tconst starlightTabs = this.closest('starlight-tabs');\n\t\t\tif (!(starlightTabs instanceof HTMLElement) || typeof localStorage === 'undefined') return;\n\t\t\tconst syncKey = starlightTabs.dataset.syncKey;\n\t\t\tif (!syncKey) return;\n\t\t\tconst label = localStorage.getItem(`starlight-synced-tabs__${syncKey}`);\n\t\t\tif (!label) return;\n\t\t\tconst tabs = [...starlightTabs?.querySelectorAll('[role=\"tab\"]')];\n\t\t\tconst tabIndexToRestore = tabs.findIndex(\n\t\t\t\t(tab) => tab instanceof HTMLAnchorElement && tab.textContent?.trim() === label\n\t\t\t);\n\t\t\tconst panels = starlightTabs?.querySelectorAll(':scope > [role=\"tabpanel\"]');\n\t\t\tconst newTab = tabs[tabIndexToRestore];\n\t\t\tconst newPanel = panels[tabIndexToRestore];\n\t\t\tif (tabIndexToRestore < 1 || !newTab || !newPanel) return;\n\t\t\ttabs[0]?.setAttribute('aria-selected', 'false');\n\t\t\ttabs[0]?.setAttribute('tabindex', '-1');\n\t\t\tpanels?.[0]?.setAttribute('hidden', 'true');\n\t\t\tnewTab.removeAttribute('tabindex');\n\t\t\tnewTab.setAttribute('aria-selected', 'true');\n\t\t\tnewPanel.removeAttribute('hidden');\n\t\t}\n\t}\n\tcustomElements.define('starlight-tabs-restore', StarlightTabsRestore);\n})()\n      Dashboard     API      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelectorOperatorValueLogicActionPassed Device PostureiniOS 17 or higher (OS version)AndDo Not InspectPassed Device PostureiniPhone Serial Numbers (Serial number)  \n\nCreate a list of device serial numbers that you do not want to inspect.\nTerminal windowcurl https://api.cloudflare.com/client/v4/accounts/{account_id}/gateway/lists \\--header \"X-Auth-Email: <EMAIL>\" \\--header \"X-Auth-Key: <API_KEY>\" \\--header \"Content-Type: application/json\" \\--data '{  \"description\": \"The serial numbers for administrators\",  \"items\": [    {      \"value\": \"8GE8721REF\"    }  ],  \"name\": \"Admin Serial Numbers\",  \"type\": \"SERIAL\"}'\n\n\nCreate a Do Not Inspect policy that checks the device against the list of serial numbers.\nTerminal windowcurl https://api.cloudflare.com/client/v4/accounts/{account_id}/gateway/rules \\--header \"X-Auth-Email: <EMAIL>\" \\--header \"X-Auth-Key: <API_KEY>\" \\--header \"Content-Type: application/json\" \\--data '{  \"name\": \"Do not inspect corporate devices\",  \"conditions\": [    {      \"type\": \"device_posture\",      \"expression\": {        \"any\": {          \"in\": {            \"lhs\": {              \"splat\": \"device_posture.checks.passed\"            },            \"rhs\": [              \"{serial_number_list_uuid}\"            ]          }        }      }    }  ],  \"action\": \"off\",  \"precedence\": 14002,  \"enabled\": true,  \"filters\": [    \"http\"  ]}'\n\n     class r extends HTMLElement{static#e=new Map;#t;#n=\"starlight-synced-tabs__\";constructor(){super();const t=this.querySelector('[role=\"tablist\"]');if(this.tabs=[...t.querySelectorAll('[role=\"tab\"]')],this.panels=[...this.querySelectorAll(':scope > [role=\"tabpanel\"]')],this.#t=this.dataset.syncKey,this.#t){const i=r.#e.get(this.#t)??[];i.push(this),r.#e.set(this.#t,i)}this.tabs.forEach((i,c)=>{i.addEventListener(\"click\",e=>{e.preventDefault();const n=t.querySelector('[aria-selected=\"true\"]');e.currentTarget!==n&&this.switchTab(e.currentTarget,c)}),i.addEventListener(\"keydown\",e=>{const n=this.tabs.indexOf(e.currentTarget),s=e.key===\"ArrowLeft\"?n-1:e.key===\"ArrowRight\"?n+1:e.key===\"Home\"?0:e.key===\"End\"?this.tabs.length-1:null;s!==null&&this.tabs[s]&&(e.preventDefault(),this.switchTab(this.tabs[s],s))})})}switchTab(t,i,c=!0){if(!t)return;const e=c?this.getBoundingClientRect().top:0;this.tabs.forEach(s=>{s.setAttribute(\"aria-selected\",\"false\"),s.setAttribute(\"tabindex\",\"-1\")}),this.panels.forEach(s=>{s.hidden=!0});const n=this.panels[i];n&&(n.hidden=!1),t.removeAttribute(\"tabindex\"),t.setAttribute(\"aria-selected\",\"true\"),c&&(t.focus(),r.#r(this,t),window.scrollTo({top:window.scrollY+(this.getBoundingClientRect().top-e)}))}#i(t){!this.#t||typeof localStorage>\"u\"||localStorage.setItem(this.#n+this.#t,t)}static#r(t,i){const c=t.#t,e=r.#s(i);if(!c||!e)return;const n=r.#e.get(c);if(n){for(const s of n){if(s===t)continue;const a=s.tabs.findIndex(o=>r.#s(o)===e);a!==-1&&s.switchTab(s.tabs[a],a,!1)}t.#i(e)}}static#s(t){return t.textContent?.trim()}}customElements.define(\"starlight-tabs\",r);\nIf you filter your network-connected devices with Magic WAN tunnels, the WARP Connector, or other devices that do not have a Cloudflare certificate installed, you will need to accommodate by creating pass-through policies. For these devices, you should explicitly exempt TLS inspection for the source network IP range from which that traffic will be originating. For example:\n      Dashboard     API      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSelectorOperatorValueActionSource Internal IPin203.0.113.0/24Do Not Inspect  Terminal windowcurl https://api.cloudflare.com/client/v4/accounts/{account_id}/gateway/rules \\--header \"X-Auth-Email: <EMAIL>\" \\--header \"X-Auth-Key: <API_KEY>\" \\--header \"Content-Type: application/json\" \\--data '{  \"name\": \"Do not inspect corporate devices\",  \"conditions\": [    {      \"type\": \"traffic\",      \"expression\": {        \"in\": {          \"lhs\": \"http.conn.internal_src_ip\",          \"rhs\": [            {              \"cidr\": \"203.0.113.0/24\"            }          ]        }      }    }  ]}'          Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!    class r extends HTMLElement{connectedCallback(){const d={'[data-icon=\"material-symbols:thumb-up-outline-rounded\"]':\"#feedback-yes\",'[data-icon=\"material-symbols:thumb-down-outline-rounded\"]':\"#feedback-no\"},s=this.querySelector(\"#feedback-thumbs\"),o=this.querySelector(\"#feedback-thanks\");if(!(!s||!o))for(const[i,n]of Object.entries(d))this.querySelector(i)?.addEventListener(\"click\",()=>{s.classList.add(\"hidden\");const e=this.querySelector(n);if(!e)return;e.classList.remove(\"hidden\");const a=e.querySelector(\"form\");a&&a.addEventListener(\"submit\",async c=>{c.preventDefault();const t=new FormData(c.target);t.set(\"page\",window.location.pathname),t.set(\"option\",n.split(\"-\")[1]),fetch(\"https://feedback.developers.cloudflare.com\",{method:\"POST\",body:t}),e.classList.add(\"hidden\"),o.classList.remove(\"hidden\")})})}}customElements.define(\"feedback-prompt\",r);       Edit page          Cloudflare DashboardDiscordCommunityLearning CenterSupport Portal\n\t\t\t\tfunction OptanonWrapper() {}\n\t\t\t  Cookie Settings",
  "custom_id": "Nye1IoOOpeBAVSxcvlMFi7QXqNgIyvB28hv9miGuwhE7bY067xbwRP1TCpRP5peS"
}