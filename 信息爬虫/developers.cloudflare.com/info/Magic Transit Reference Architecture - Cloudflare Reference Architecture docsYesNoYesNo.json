{
  "url": "https://developers.cloudflare.com/reference-architecture/architectures/magic-transit/#_top",
  "title": "Magic Transit Reference Architecture - Cloudflare Reference Architecture docsYesNoYesNo",
  "keyword": "",
  "content": "Skip to content          Cloudflare Docs            Search            Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n const r=\"starlight-theme\",o=e=>e===\"auto\"||e===\"dark\"||e===\"light\"?e:\"auto\",c=()=>o(typeof localStorage<\"u\"&&localStorage.getItem(r));function n(e){typeof localStorage<\"u\"&&localStorage.setItem(r,e===\"light\"||e===\"dark\"?e:\"\")}const l=()=>matchMedia(\"(prefers-color-scheme: light)\").matches?\"light\":\"dark\";function t(e){StarlightThemeProvider.updatePickers(e),document.documentElement.dataset.theme=e===\"auto\"?l():e,n(e)}matchMedia(\"(prefers-color-scheme: light)\").addEventListener(\"change\",()=>{c()===\"auto\"&&t(\"auto\")});class s extends HTMLElement{constructor(){super(),t(c()),this.querySelector(\"select\")?.addEventListener(\"change\",a=>{a.currentTarget instanceof HTMLSelectElement&&t(o(a.currentTarget.value))})}}customElements.define(\"starlight-theme-select\",s); class n extends HTMLElement{constructor(){super();const e=this.querySelector(\"select\");e&&e.addEventListener(\"change\",t=>{t.currentTarget instanceof HTMLSelectElement&&(window.location.pathname=t.currentTarget.value)})}}customElements.define(\"starlight-lang-select\",n);           class s extends HTMLElement{constructor(){super(),this.btn=this.querySelector(\"button\"),this.btn.addEventListener(\"click\",()=>this.toggleExpanded());const t=this.closest(\"nav\");t&&t.addEventListener(\"keyup\",e=>this.closeOnEscape(e))}setExpanded(t){this.setAttribute(\"aria-expanded\",String(t)),document.body.toggleAttribute(\"data-mobile-menu-expanded\",t)}toggleExpanded(){this.setExpanded(this.getAttribute(\"aria-expanded\")!==\"true\")}closeOnEscape(t){t.code===\"Escape\"&&(this.setExpanded(!1),this.btn.focus())}}customElements.define(\"starlight-menu-button\",s);              Reference Architecture      \n\t\t(() => {\n\t\t\ttry {\n\t\t\t\tif (!matchMedia('(min-width: 50em)').matches) return;\n\t\t\t\t/** @type {HTMLElement | null} */\n\t\t\t\tconst target = document.querySelector('sl-sidebar-state-persist');\n\t\t\t\tconst state = JSON.parse(sessionStorage.getItem('sl-sidebar-state') || '0');\n\t\t\t\tif (!target || !state || target.dataset.hash !== state.hash) return;\n\t\t\t\twindow._starlightScrollRestore = state.scroll;\n\t\t\t\tcustomElements.define(\n\t\t\t\t\t'sl-sidebar-restore',\n\t\t\t\t\tclass SidebarRestore extends HTMLElement {\n\t\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst idx = parseInt(this.dataset.index || '');\n\t\t\t\t\t\t\t\tconst details = this.closest('details');\n\t\t\t\t\t\t\t\tif (details && typeof state.open[idx] === 'boolean') details.open = state.open[idx];\n\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch {}\n\t\t})();\n\t     Overview     How to use     Find by solution        Reference Architectures         Overview     Cloudflare SASE with Microsoft     Content Delivery Network (CDN)     Load Balancing     Magic Transit     Multi-Vendor Architecture     Secure Access Service Edge (SASE)     Security Architecture            Reference Architecture Diagrams         Overview        Artificial Intelligence (AI)         Overview     Automatic captioning for video uploads     Composable AI architecture     Content-based asset creation     Ingesting BigQuery Data into Workers AI     Multi-vendor AI observability and control     Retrieval Augmented Generation (RAG)            Bots         Overview     Bot management            Content Delivery         Overview     Optimizing image delivery            Network         Overview     BYOIP to Cloudflare     Protect hybrid cloud networks     Protect ISP and telecommunications networks from DDoS attacks     Protect public networks            Secure Access Service Edge (SASE)         Overview     Access to private apps without having to deploy client agents     DNS filtering solution for Internet service providers     Self-hosted VoIP for hybrid users     ZTNA with external authorization            Security         Overview     Securing data at rest     Securing data in transit     Securing data in use            Serverless         Overview     A/B-testing using Workers     Fullstack applications     Serverless ETL pipelines     Serverless global APIs     Serverless image content management            Storage         Overview     Egress-free object storage in multi-cloud setups     Event notifications for storage     On-demand Object Storage Data Migration                Design Guides         Overview     Cloudflare's benefits for SaaS providers     Zero Trust for SaaS applications     Network-focused VPN migration     Secure application delivery     Zero trust architecture for startups            Implementation Guides         Overview        Zero Trust         Overview     Secure your Internet traffic and SaaS apps ↗     Replace your VPN ↗     Deploy Zero Trust Web Access ↗               \n\t\t(() => {\n\t\t\tconst scroller = document.getElementById('starlight__sidebar');\n\t\t\tif (!window._starlightScrollRestore || !scroller) return;\n\t\t\tscroller.scrollTop = window._starlightScrollRestore;\n\t\t\tdelete window._starlightScrollRestore;\n\t\t})();\n\t        Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n            const a=document.getElementById(\"starlight__sidebar\"),n=a?.querySelector(\"sl-sidebar-state-persist\"),o=\"sl-sidebar-state\",i=()=>{let t=[];const e=n?.dataset.hash||\"\";try{const s=sessionStorage.getItem(o),r=JSON.parse(s||\"{}\");Array.isArray(r.open)&&r.hash===e&&(t=r.open)}catch{}return{hash:e,open:t,scroll:a?.scrollTop||0}},c=t=>{try{sessionStorage.setItem(o,JSON.stringify(t))}catch{}},d=()=>c(i()),l=(t,e)=>{const s=i();s.open[e]=t,c(s)};n?.addEventListener(\"click\",t=>{if(!(t.target instanceof Element))return;const e=t.target.closest(\"summary\")?.closest(\"details\");if(!e)return;const s=e.querySelector(\"sl-sidebar-restore\"),r=parseInt(s?.dataset.index||\"\");isNaN(r)||l(!e.open,r)});addEventListener(\"visibilitychange\",()=>{document.visibilityState===\"hidden\"&&d()});addEventListener(\"pageHide\",d);    On this page    Overview     Introduction     Who is this document for and what will you learn?        What Is Magic Transit?     Baking resilience into our network using anycast        Deployment Architectures for Magic Transit     Default Configuration (Ingress Only, Direct Server Return)     Magic Transit With Egress Option Enabled     Magic Transit Over Cloudflare Network Interconnect (CNI)     Magic Transit Protecting Public Cloud-Hosted Services     Magic Transit and Magic WAN     Magic Firewall: Control and Filter Unwanted Traffic Before It Reaches the Enterprise Network        A Note on Always-On and On-Demand Deployments     Summary     On this page   Overview     Introduction     Who is this document for and what will you learn?        What Is Magic Transit?     Baking resilience into our network using anycast        Deployment Architectures for Magic Transit     Default Configuration (Ingress Only, Direct Server Return)     Magic Transit With Egress Option Enabled     Magic Transit Over Cloudflare Network Interconnect (CNI)     Magic Transit Protecting Public Cloud-Hosted Services     Magic Transit and Magic WAN     Magic Firewall: Control and Filter Unwanted Traffic Before It Reaches the Enterprise Network        A Note on Always-On and On-Demand Deployments     Summary         Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!                    Products        …       Reference Architecture        Reference Architectures        Magic Transit Reference Architecture        {\"@context\":\"https://schema.org\",\"@type\":\"BreadcrumbList\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"item\":{\"@id\":\"/products/\",\"name\":\"Products\"}},{\"@type\":\"ListItem\",\"position\":2,\"item\":{\"@id\":\"/reference-architecture/\",\"name\":\"Reference Architecture\"}},{\"@type\":\"ListItem\",\"position\":3,\"item\":{\"@id\":\"/reference-architecture/architectures/\",\"name\":\"Reference Architectures\"}},{\"@type\":\"ListItem\",\"position\":4,\"item\":{\"@id\":\"/reference-architecture/architectures/magic-transit/\",\"name\":\"Magic Transit Reference Architecture\"}}]} class t extends HTMLElement{constructor(){super(),this.isManualToggle=!1,this.breadcrumbs=null,this.mainBemClass=null,this.totalWidth=0,this.resizeObserver=null,this.handleTruncatedButtonClick=()=>{this.breadcrumbs?.classList.remove(\"is-truncated\"),this.isManualToggle=!0},this.mainBemClass=this.dataset.mainBemClass||null;const e=this.dataset.id;!(\"truncated\"in this.dataset)||!e||(this.breadcrumbs=document.getElementById(e),this.initializeCrumbs(),this.setupResizeObserver())}initializeCrumbs(){this.breadcrumbs?.querySelectorAll(`.${this.mainBemClass}__crumb`)?.forEach(s=>{this.totalWidth+=s.offsetWidth})}setupResizeObserver(){this.resizeObserver=new ResizeObserver(e=>{e.forEach(s=>{this.checkOverflow(s.target.clientWidth)})}),this.breadcrumbs&&this.resizeObserver.observe(this.breadcrumbs)}connectedCallback(){this.showHiddenCrumbs()}disconnectedCallback(){this.resizeObserver&&this.breadcrumbs&&(this.resizeObserver.unobserve(this.breadcrumbs),this.resizeObserver.disconnect())}toggleTruncated(e){this.breadcrumbs?.classList.toggle(\"is-truncated\",e)}showHiddenCrumbs(){const e=this.breadcrumbs?.querySelector(`.${this.mainBemClass}__truncated-button`);e?.removeEventListener(\"click\",this.handleTruncatedButtonClick),e?.addEventListener(\"click\",this.handleTruncatedButtonClick.bind(this))}checkOverflow(e){const s=this.totalWidth>e&&!this.isManualToggle;this.toggleTruncated(s),s||(this.isManualToggle=!1)}}customElements.get(\"astro-breadcrumbs\")||customElements.define(\"astro-breadcrumbs\",t);Magic Transit Reference Architecture   Last reviewed:  almost 2 years ago                              const L=\"starlight-image-zoom-zoomable\",w=window.requestIdleCallback??(y=>setTimeout(y,1));customElements.define(\"starlight-image-zoom\",class f extends HTMLElement{#t;#i=[];#o;#s=this.querySelector(\"template\");#e={image:\"starlight-image-zoom-image\",opened:\"starlight-image-zoom-opened\",source:\"starlight-image-zoom-source\",transition:\"starlight-image-zoom-transition\"};#r=\"zoomTransform\";static#u=!1;constructor(){super();const t=()=>{w(()=>{const e=[...document.querySelectorAll(L)];e.length!==0&&(this.#m(e),document.addEventListener(\"click\",this.#d),window.addEventListener(\"resize\",this.#a))})};window.addEventListener(\"DOMContentLoaded\",t,{once:!0}),document.addEventListener(\"astro:after-preparation\",()=>{document.removeEventListener(\"click\",this.#d),window.removeEventListener(\"resize\",this.#a)},{once:!0}),f.#u||=document.addEventListener(\"astro:after-swap\",t)===void 0}#m(t){for(const e of t){const n=e.querySelector(\"img\");n&&(this.#i.push(n),e.querySelector(\"button\")?.addEventListener(\"click\",i=>{i.stopPropagation(),this.#l(n)}))}}#d=({target:t})=>{if(!(t instanceof HTMLElement&&t.closest(\"figcaption\"))){if(this.#t){this.#n();return}t instanceof HTMLImageElement&&this.#i.includes(t)&&this.#l(t)}};#a=()=>{this.#n(!0)};#c=()=>{this.#n()};#p=t=>{t.preventDefault(),this.#n()};#l(t){if(!this.#s||this.#t)return;this.#o=document.activeElement;const e=document.createElement(\"div\");e.append(this.#s.content.cloneNode(!0));const n=e.querySelector(\"dialog\"),i=n?.querySelector(\"figure\");if(!n||!i)return;const r={overflow:document.body.style.overflow,width:document.body.style.width},d=document.body.clientWidth;document.body.style.overflow=\"hidden\",document.body.style.width=`${d}px`,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",`calc(var(--sl-nav-pad-x) + ${window.innerWidth-d}px)`);const s=this.#f(t);t.classList.add(this.#e.source),s.classList.add(this.#e.image),i.append(s),this.#w(t.getAttribute(\"alt\"),i),document.body.append(e),document.addEventListener(\"wheel\",this.#c,{once:!0}),n.addEventListener(\"cancel\",this.#p),n.showModal(),w(()=>{s.style.transform=\"\",document.body.classList.add(this.#e.opened)}),this.#t={body:r,dialog:n,image:t,zoomedImage:s}}#n(t=!1){if(window.removeEventListener(\"wheel\",this.#c),!this.#t)return;const{zoomedImage:e}=this.#t;e.style.transform=e.dataset[this.#r]??\"\",document.body.classList.add(this.#e.transition),document.body.classList.remove(this.#e.opened);const{matches:n}=window.matchMedia(\"(prefers-reduced-motion: reduce)\");t||n?this.#h():e.addEventListener(\"transitionend\",this.#h,{once:!0})}#h=()=>{if(!this.#t)return;const{dialog:t,image:e}=this.#t;document.body.classList.remove(this.#e.transition),e.classList.remove(this.#e.source),t.parentElement?.remove(),document.body.style.overflow=this.#t.body.overflow,document.body.style.width=this.#t.body.width,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",\"var(--sl-nav-pad-x)\"),this.#t=void 0,this.#o instanceof HTMLElement&&this.#o.focus()};#w(t,e){if(Object.hasOwn(this.dataset,\"hideCaption\")||(t=t?.trim()??\"\",t.length===0))return;const n=document.createElement(\"figcaption\");n.ariaHidden=\"true\",n.textContent=t,e.append(n)}#f(t){const e=t.getBoundingClientRect(),n=this.#y(t),i=n?window.innerWidth:t.naturalWidth,r=n?window.innerHeight:t.naturalHeight,d=Math.min(window.innerWidth,i),s=Math.min(window.innerHeight,r),l=Math.min(d/i,s/r),a=(n?window.innerWidth:t.naturalWidth)*l,c=(n?window.innerHeight:t.naturalHeight)*l,h=(window.innerHeight-c)/2,u=(window.innerWidth-a)/2,o=t.cloneNode(!0);o.removeAttribute(\"id\"),o.style.position=\"absolute\",o.style.width=`${a}px`,o.style.height=`${c}px`,o.style.top=`${h}px`,o.style.left=`${u}px`,o.style.transform=\"\";const m=e.width/a,p=e.height/c,g=(-u+(e.width-a)/2+e.left)/m,v=(-h+(e.height-c)/2+e.top)/p;return o.style.transform=`scale(${m}, ${p}) translate3d(${g}px, ${v}px, 0)`,o.dataset[this.#r]=o.style.transform,t.parentElement?.tagName===\"PICTURE\"&&t.currentSrc&&(o.src=t.currentSrc),o}#y(t){return t.currentSrc.toLowerCase().endsWith(\".svg\")}});  Introduction\nThe purpose of this document is to describe the key architecture, functionalities, and network deployment options of Cloudflare Magic Transit — a BGP-based DDoS protection and traffic acceleration service for Internet-facing network infrastructure.\nWho is this document for and what will you learn?\nThis reference architecture is designed for IT or network professionals with some responsibility over or familiarity with their organization's existing network infrastructure. It is useful to have some experience with technologies and concepts important to content delivery, including routers, DNS and firewalls.\nTo build a stronger baseline understanding of Cloudflare, we recommend the following resources:\n\nWhat is Cloudflare? | Website ↗ (5 minute read) or video (2 minutes)\n\n\nBlog: Magic Transit makes your network smarter, better, stronger, and cheaper to operate ↗ (14 minute read)\n\nThose who read this reference architecture will learn:\n\nHow Cloudflare Magic Transit protects your network infrastructure from denial of service attacks (DDoS)\nHow to architecture Magic Transit into your existing network infrastructure\n\nWhat Is Magic Transit?\nProtecting network infrastructure from DDoS attacks demands a unique combination of strength and speed. Volumetric attacks can easily overwhelm hardware boxes and their bandwidth-constrained Internet links. And most cloud-based solutions redirect traffic to centralized scrubbing centers, which impacts network performance significantly.\nCloudflare Magic Transit provides DDoS protection and traffic acceleration for on-premise, cloud, and hybrid networks. With data centers spanning hundreds of cities ↗ and offering hundreds of Tbps in mitigation capacity, Magic Transit can detect and mitigate attacks close to their source of origin in under three seconds globally on average — all while routing traffic faster than the public Internet.\nFigure 1: Magic transit overview\nAt a high level, Magic Transit works as follows:\n\n\nConnect: Using Border Gateway Protocol (BGP) route announcements to the Internet, and the Cloudflare anycast network, customer traffic is ingested at a Cloudflare data center closest to the source.\n\n\nProtect and Process: All customer traffic is inspected for attacks. Advanced and automated mitigation techniques are applied immediately upon detecting an attack. Additional functions such as load balancing, next-generation firewall, content caching, and serverless compute are also available as a service.\n\n\nAccelerate: Clean traffic is routed over Cloudflare’s low-latency network links for optimal throughput and handed off over IP tunnels (either GRE or IPsec) or private network interconnects (PNI) to the origin network. Magic Transit uses anycast IP addresses for Cloudflare’s tunnel endpoints, meaning that any server in any data center is capable of encapsulating and decapsulating packets for the same tunnel. For more details specifically on tunnels and encapsulation, refer to GRE and IPsec tunnels.\n\n\nBaking resilience into our network using anycast\nMagic Transit uses anycast IP addresses for its end of the network tunnel endpoints — so a single tunnel configured from a customer’s network to Cloudflare connects to all Cloudflare global data centers (excluding the China Network). This does not add strain on the router; from the router’s perspective, it is a single tunnel to a single IP endpoint.\nThis works because while the tunnel endpoint is technically bound to an IP address, it need not be bound to a specific device. Any device that can strip off the outer headers and then route the inner packet can handle any packet sent over the tunnel.\nIn the event of a network outage or other issues, tunnels fail over automatically — with no impact to a customer’s network performance.\nDeployment Architectures for Magic Transit\nDefault Configuration (Ingress Only, Direct Server Return)\nBy default, Magic Transit processes traffic in the ingress direction only (from the Internet to the customer network). The server return traffic back to the clients is routed by the customer's DC edge router via its uplinks to the Internet/ISP based on the edge router’s default routing table. This server return traffic will not transit through Cloudflare via tunnels. This is referred to as Direct Server Return (DSR).\nThe network diagram in Figure 2 illustrates such a Magic Transit setup, and the end-to-end packet flow of Magic Transit-protected traffic. The tunnel in this setup uses GRE for encapsulation.\nFigure 2: Reference Configuration of Magic Transit anycast Tunnel (GRE) With Default DSR Option\n\n\nCloudflare provides the customer with a pair of anycast IP addresses for the Cloudflare end of the tunnel endpoints. These are publicly routable IP addresses from Cloudflare-owned address space. The pair of anycast IP addresses can be used to configure two tunnels for network redundancy, although only one is required for a basic configuration. The above configuration shows a single tunnel, with the Cloudflare end of the tunnel endpoint address being 192.0.2.1.\n\n\nThe customer end of the anycast GRE tunnel needs to be a publicly routable address. It is typically the IP address of the WAN interface on the customer edge router. In this example it is 192.0.2.153.\n\n\nThe IP addresses of the tunnel interfaces are RFC 1918 private addresses. These addresses are only \"locally significant\" within the particular Magic Transit service instance that they are part of. Therefore, the customer can select any RFC 1918 addresses they desire, as long as they do not overlap with those of other tunnels configured within the same Magic Transit service instance.\n\n\nAs best practice, given the tunnels are point-to-point connections, a /31 subnet is sufficient for allocating the 2 IP addresses required for a given tunnel. In the above example, the 10.10.10.0/31 subnet is chosen, with the Cloudflare end of the tunnel interface being 10.10.10.0/31 and the customer's DC edge router side being 10.10.10.1/31.\n\n\nOnce the tunnel is configured, a route is configured in the Magic Transit service instance to forward traffic destined to a given customer prefix onto the correct tunnel.\n\n\nTraffic destined to customer prefix 203.0.113.0/24 is routed onto the tunnel whose remote end (i.e. the customer’s end, from the Cloudflare network's perspective) of the tunnel interface is 10.10.10.1.\n\n\nGiven this is a Direct Server Return (DSR) setup, the server return traffic follows the default route (ip route 0/0) configured on the customer edge router and is sent to its uplink peer (i.e. customer’s ISP's router), en route back to the clients over the Internet. This return traffic does not traverse Cloudflare network.\n\n\nNote: The smallest IP prefix size (i.e. with the longest IP subnet mask) that most ISPs accept in each other's BGP advertisements is /24; e.g. x.x.x.0/24 or y.y.y.0/23 are okay, but z.z.z.0/25 is not. Therefore, the smallest IP prefix size Cloudflare Magic Transit can advertise on behalf of the customers is /24.\nMagic Transit With Egress Option Enabled\nWhen Magic Transit is deployed with the Egress option enabled, egress traffic from the customer's network flows over the Cloudflare network as well. This deployment option provides symmetry to the traffic flow, where both client-to-server and server-return traffic flow through the Cloudflare network. This implementation provides added security and reliability to the server-return traffic, as afforded by the Cloudflare network.\nThe following network diagram illustrates the end-to-end packet flow between the end client and customer network when the Magic Transit Egress option is enabled.\nFigure 3: Magic Transit With Egress Option Enabled\n\n\nThe ingress traffic flow is the same as in the Default Configuration use case above.\n\n\nFor egress traffic to be received and processed by Magic Transit, the source IP addresses of the traffic need to be in the range of the Magic Transit-protected IP prefixes, and the destination IP addresses need to be public Internet routable, i.e. non-RFC 1918 addresses.\n\n\nIt is worth noting that for customers who bring their own public IP addresses (BYOIP) for cloud-hosted services, the Magic Transit Egress option can provide additional value by eliminating the need for them to purchase and implement BYOIP services with their cloud providers, reducing their cloud bill and lowering operational costs.\nTo accomplish this, the IP tunnels that on-ramps to Magic Transit are configured between the cloud providers' VPCs and the Cloudflare network. With the Magic Transit Egress option, both directions of client-server traffic would flow through these tunnels. The BYOIP addresses in the tunneled packets are hidden behind the outer tunnel endpoint IP addresses and the tunnel header, making them \"invisible\" to the underlying cloud provider network elements between the VPCs and the Cloudflare network.\nMagic Transit Over Cloudflare Network Interconnect (CNI)\nCloudflare Network Interconnect (CNI) allows customers to connect their network infrastructure directly to Cloudflare – bypassing the public Internet – for a more reliable, performant, and secure experience.\n\n\nCNI is provisioned by the cross-connect providers as a set of layer 2 connections, and Cloudflare allocates a pair of IP addresses from Cloudflare’s own Internet-routable IP address block for each connection.\n\n\nCloudflare coordinates with the customer to configure these links and to establish a BGP peering session over the links during CNI onboarding.\n\n\nOnce the BGP session is up between the Cloudflare network and the customer edge router that are connected via CNI, Cloudflare-owned prefixes will be advertised over this CNI link to the customer edge router.\n\n\nFigure 4 illustrates a reference configuration for Magic Transit over CNI, and its associated packet flow.\nNote: The example demonstrated here is for the default Magic Transit service without the Egress option enabled. As described in earlier sections, in Magic Transit Direct Server Return mode (i.e. Ingress only), the server return traffic will be routed by the customer edge router to the clients via their ISP through the public Internet.\nFigure 4: Reference Configuration of Magic Transit Over CNI (Default DSR Option)\nWhen the Magic Transit Egress option is enabled and utilized, the server return traffic can be sent back to the clients through the Cloudflare network, via the IP tunnels that are configured over the CNI connections. Figure 5 illustrates one such example.\nFigure 5: Reference Configuration of Magic Transit Over CNI with Egress Option Enabled\nMagic Transit Protecting Public Cloud-Hosted Services\nMagic Transit protects services hosted on-premise and in the cloud. This use case illustrates the configuration for a cloud-hosted deployment.\nFigure 6: Protect Multi-Cloud-Based Services With Magic Transit (Egress Option Enabled)\n\n\nIn this example, a given customer has two cloud VPC deployments spread across two different cloud providers, and in two different geographical regions.\n\n\nIn this example, the customer’s /24 or larger prefix is split into multiple smaller (i.e. longer subnet mask length) prefixes (e.g. /26) and assigned to the various VPCs in different locations. Upon establishing the tunnels from the Cloudflare network to each of the VPCs, the customer can configure routes centrally in the Magic Transit configuration to route traffic to the respective VPCs. Such configuration can be made via API or UI dashboard.\n\n\nNote that with the Magic Transit Egress option, the customer can bypass each cloud provider's BYOIP services, its associated fees, and the configuration and operations complexity, by sending egress traffic (i.e. server return or server-to-Internet traffic from the protected prefix) through the Cloudflare global network via the Magic Transit tunnels.\nMagic Transit and Magic WAN\nIn addition to protecting and routing traffic for external-facing services of an enterprise (i.e. north-south Internet-routable traffic) with the Cloudflare Magic Transit service, customers can protect east-west \"intra-enterprise\" internal traffic (e.g. RFC 1918 private addresses), interconnecting all the sites of an enterprise, using Cloudflare Magic WAN.\nMagic WAN replaces legacy WAN architectures with the Cloudflare network, providing global connectivity, cloud-based security, performance, and control through one simple user interface.\nThe Cloudflare Magic Transit and Magic WAN services combined provide a holistic, secure, reliable, and performant global network-as-a-service solution for an entire enterprise, protecting and accelerating north-south as well as east-west traffic.\nBoth services can either be deployed in the same service instance, or, for customers who prefer to keep the administration and traffic flow of external, Internet-facing networks and internal corporate networks completely separate, different service instances can be deployed for Magic Transit and Magic WAN.\nFigure 7 illustrates an example of deploying Magic Transit and Magic WAN services in separate service instances.\nFigure 7: Magic Transit + Magic WAN Provide Network-as-a-Service for the Entire Enterprise\n\n\nIn the example, GRE tunnels are used to connect the customer's various sites over the Cloudflare global anycast network. The Cloudflare anycast IP address for the Magic Transit service instance is 192.0.2.1, while the one for the Magic WAN service instance is 192.0.2.2. The Magic Transit service is enabled with the Egress option.\n\n\nThe Magic Transit service protects and routes external-facing front-end client-server traffic. The Magic WAN service protects and routes enterprise internal traffic such as that of internal applications, back-end database sync, and branch-to-DC and branch-to-branch traffic.\n\n\nMagic Firewall: Control and Filter Unwanted Traffic Before It Reaches the Enterprise Network\nWhile Magic Transit protects customers’ services from DDoS attacks, many network administrators want to be able to control and block other unwanted or potentially malicious traffic. Cloudflare Magic Firewall enforces consistent network security policies across the entire customer WAN, including headquarters, branch offices, and virtual private clouds, and allows customers to deploy fine-grained filtering rules globally in seconds — all from a common dashboard.\nMagic Firewall is deployed and configured as part of Magic Transit. All ingress traffic flowing through Cloudflare edge data centers, whose destination prefixes are protected by Magic Transit, can be filtered by Magic Firewall.\nFigure 8: Magic Firewall Blocks Unwanted and Malicious Traffic at the Internet Edge\nIn Magic Firewall rules, administrators can match and filter network traffic not only based on the typical 5-tuple (source/destination IP, source/destination port, protocol) information carried in the IP packet header but also other packet information such as IP packet length, IP header length, TTL, etc. In addition, geographical information such as the name of the Cloudflare data center/colo, the region, and the country the data centers are located in can also be used in configuring Magic Firewall rules (geo-blocking).\nFor further details on Magic Firewall and its configuration, please refer to this blog post ↗ and our developer docs.\nA Note on Always-On and On-Demand Deployments\nA cloud DDoS mitigation service provider can monitor traffic for threats at all times (the always-on deployment model) or reroute traffic only when an attack is detected (on-demand). This decision affects response time and time-to-mitigation. In some cases, it also has repercussions for latency.\nIn an on-demand deployment model, inbound traffic is monitored and measured at the network edge to detect volumetric attacks. During normal operations, or \"peacetime,\" all traffic directly reaches applications and infrastructure without any delay or redirection. Traffic is diverted to the cloud scrubbing provider only in the case of an active DDoS attack. In many cases, a customer is required to call the service provider to redirect traffic, thereby increasing the response time.\nThe always-on mode is a hands-off approach to DDoS mitigation that does not require the customer to do anything in the event of an attack. The organization’s traffic is always routed through the cloud provider’s data centers for threat inspection, even during peacetime. This minimizes the time from detection to mitigation, and there is no service interruption.\nOf all approaches and deployment options, the always-on method provides the most comprehensive protection.\nHowever, depending on the provider, diverting all traffic through the DDoS mitigation provider’s cloud might add latency that is suboptimal for business-critical applications. Cloudflare is architected so that customers do not incur a latency penalty as a result of attacks — even for always-on deployments. Analyzing traffic at the edge is the only way to mitigate at scale without impacting performance.\nThis is because ingesting traffic via anycast ensures that traffic travels only to the nearest Cloudflare data center for inspection. With data centers in hundreds of cities worldwide ↗, it is likely to be a short distance. This eliminates the trombone effect.\nIn many cases, traffic is faster when routed over Cloudflare ↗ than over the public Internet. We believe customers should not have to sacrifice performance to achieve comprehensive security.\nSummary\nCloudflare offers comprehensive network services to connect and protect on-premise, cloud-hosted, and hybrid enterprise networks. Cloudflare provides various connectivity and deployment options to suit customers' unique architectures.\n\n\nCloudflare Magic Transit is a cloud-native network security solution that uses the power of the Cloudflare global network to protect organizations against DDoS attacks.\n\n\nMagic Transit comes with a built-in network firewall that helps customers phase out on-premise firewalls and deploy network security as-a-service that scales.\n\n\nIn addition to protecting and routing traffic for external-facing services of an enterprise (i.e. north-south Internet-routable traffic), customers can connect and protect east-west “intra-enterprise” internal traffic using Cloudflare Magic WAN.\n\n\nIf you would like to learn more about Magic Transit, Magic WAN, or Magic Firewall, please reach out ↗ to us for a demo.     Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!    class r extends HTMLElement{connectedCallback(){const d={'[data-icon=\"material-symbols:thumb-up-outline-rounded\"]':\"#feedback-yes\",'[data-icon=\"material-symbols:thumb-down-outline-rounded\"]':\"#feedback-no\"},s=this.querySelector(\"#feedback-thumbs\"),o=this.querySelector(\"#feedback-thanks\");if(!(!s||!o))for(const[i,n]of Object.entries(d))this.querySelector(i)?.addEventListener(\"click\",()=>{s.classList.add(\"hidden\");const e=this.querySelector(n);if(!e)return;e.classList.remove(\"hidden\");const a=e.querySelector(\"form\");a&&a.addEventListener(\"submit\",async c=>{c.preventDefault();const t=new FormData(c.target);t.set(\"page\",window.location.pathname),t.set(\"option\",n.split(\"-\")[1]),fetch(\"https://feedback.developers.cloudflare.com\",{method:\"POST\",body:t}),e.classList.add(\"hidden\"),o.classList.remove(\"hidden\")})})}}customElements.define(\"feedback-prompt\",r);       Edit page          Cloudflare DashboardDiscordCommunityLearning CenterSupport Portal\n\t\t\t\tfunction OptanonWrapper() {}\n\t\t\t  Cookie Settings",
  "custom_id": "1lZbVgR6el0kTVUCo7hAH22XwOVX8wLqpuVFZZXHeXirtVHczU4giNxPgKFsQ0Hq"
}