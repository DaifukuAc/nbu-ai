{
  "url": "https://developers.cloudflare.com/cloudflare-one/connections/connect-devices/warp/user-side-certificates/manual-deployment/#_top",
  "title": "Install certificate manually - Cloudflare Zero Trust docsYesNoYesNo",
  "keyword": "",
  "content": "Skip to content          Cloudflare Docs            Search            Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n const r=\"starlight-theme\",o=e=>e===\"auto\"||e===\"dark\"||e===\"light\"?e:\"auto\",c=()=>o(typeof localStorage<\"u\"&&localStorage.getItem(r));function n(e){typeof localStorage<\"u\"&&localStorage.setItem(r,e===\"light\"||e===\"dark\"?e:\"\")}const l=()=>matchMedia(\"(prefers-color-scheme: light)\").matches?\"light\":\"dark\";function t(e){StarlightThemeProvider.updatePickers(e),document.documentElement.dataset.theme=e===\"auto\"?l():e,n(e)}matchMedia(\"(prefers-color-scheme: light)\").addEventListener(\"change\",()=>{c()===\"auto\"&&t(\"auto\")});class s extends HTMLElement{constructor(){super(),t(c()),this.querySelector(\"select\")?.addEventListener(\"change\",a=>{a.currentTarget instanceof HTMLSelectElement&&t(o(a.currentTarget.value))})}}customElements.define(\"starlight-theme-select\",s); class n extends HTMLElement{constructor(){super();const e=this.querySelector(\"select\");e&&e.addEventListener(\"change\",t=>{t.currentTarget instanceof HTMLSelectElement&&(window.location.pathname=t.currentTarget.value)})}}customElements.define(\"starlight-lang-select\",n);           class s extends HTMLElement{constructor(){super(),this.btn=this.querySelector(\"button\"),this.btn.addEventListener(\"click\",()=>this.toggleExpanded());const t=this.closest(\"nav\");t&&t.addEventListener(\"keyup\",e=>this.closeOnEscape(e))}setExpanded(t){this.setAttribute(\"aria-expanded\",String(t)),document.body.toggleAttribute(\"data-mobile-menu-expanded\",t)}toggleExpanded(){this.setExpanded(this.getAttribute(\"aria-expanded\")!==\"true\")}closeOnEscape(t){t.code===\"Escape\"&&(this.setExpanded(!1),this.btn.focus())}}customElements.define(\"starlight-menu-button\",s);              Cloudflare Zero Trust      \n\t\t(() => {\n\t\t\ttry {\n\t\t\t\tif (!matchMedia('(min-width: 50em)').matches) return;\n\t\t\t\t/** @type {HTMLElement | null} */\n\t\t\t\tconst target = document.querySelector('sl-sidebar-state-persist');\n\t\t\t\tconst state = JSON.parse(sessionStorage.getItem('sl-sidebar-state') || '0');\n\t\t\t\tif (!target || !state || target.dataset.hash !== state.hash) return;\n\t\t\t\twindow._starlightScrollRestore = state.scroll;\n\t\t\t\tcustomElements.define(\n\t\t\t\t\t'sl-sidebar-restore',\n\t\t\t\t\tclass SidebarRestore extends HTMLElement {\n\t\t\t\t\t\tconnectedCallback() {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tconst idx = parseInt(this.dataset.index || '');\n\t\t\t\t\t\t\t\tconst details = this.closest('details');\n\t\t\t\t\t\t\t\tif (details && typeof state.open[idx] === 'boolean') details.open = state.open[idx];\n\t\t\t\t\t\t\t} catch {}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch {}\n\t\t})();\n\t     Overview     Get started        Implementation guides         Secure your Internet traffic and SaaS apps ↗     Replace your VPN ↗     Deploy Zero Trust Web Access ↗            Identity         Overview     One-time PIN login        Device posture         Overview        WARP client checks         Overview     Application check     Carbon Black     Client certificate     Device serial numbers     Device UUID     Disk encryption     Domain joined     File check     Firewall     OS version     Require Gateway     Require WARP     SentinelOne            Service providers         Overview     CrowdStrike     Kolide     Microsoft Endpoint Manager     SentinelOne     Tanium     Uptycs     Workspace ONE            Access integrations         Overview     Mutual TLS     Tanium                User management         Overview     Access groups     Session management     Seat management     SCIM provisioning         Service tokens        Authorization cookie         Overview     Validate JWTs     Application token     CORS            SSO integration         Overview     Generic OIDC     Generic SAML 2.0     Active Directory (SAML)     Amazon Cognito     AWS IAM (SAML)     Centrify     Centrify (SAML)     Citrix ADC (SAML)     Facebook     GitHub     Google     Google Workspace     JumpCloud (SAML)     Keycloak (SAML)     LinkedIn     Microsoft Entra ID     Okta     Okta (SAML)     OneLogin     OneLogin (SAML)     PingFederate     PingOne     PingOne (SAML)     Signed AuthN requests (SAML)     Yandex                Connections         Overview        Cloudflare Tunnel         Overview        Get started         Overview     Create a remotely-managed tunnel (dashboard)     Create a locally-managed tunnel (CLI)     Useful terms            Downloads         Overview     Update cloudflared     License     Copyrights            Configure a tunnel         Overview     Remotely-managed tunnel        Locally-managed tunnel         Overview     Configuration file        Run as a service         Overview     Linux     macOS     Windows         Useful commands     Tunnel permissions         Origin configuration     Tunnel run parameters            Deploy a tunnel         Overview     Tunnel with firewall     Tunnel availability and failover     System requirements        Environments         Overview     Ansible     AWS     Azure     GCP     Kubernetes     Terraform                Use cases         Overview        SSH         Overview     SSH with Access for Infrastructure New     Self-managed SSH keys     Browser-rendered SSH terminal     SSH with client-side cloudflared         RDP     SMB     gRPC            Private networks         Overview        Connect private networks         Overview     Private DNS     Virtual networks     Load balancing         Peer-to-peer connectivity        WARP Connector         Overview Beta     Site-to-Internet     Site-to-site     User-to-site     VPC deployments                Public hostnames         Overview     DNS records     Load balancing            Monitor tunnels         Overview     Logs     Notifications     Metrics            Troubleshoot tunnels         Overview     Private network connectivity     Common errors            Do more with Tunnel         Overview     Migrate legacy tunnels     Quick Tunnels                Connect devices         Overview        WARP         Overview     First-time setup        Download WARP         Overview     Update WARP     Migrate 1.1.1.1 app            User-side certificates         Overview     Install certificate using WARP     Install certificate manually     Deploy custom certificate            Deploy WARP         Overview        Managed deployment         Overview        Partners         Overview     Fleet     Hexnode     Intune     Jamf     JumpCloud     Kandji         Parameters     Connect WARP before Windows login     Switch between Zero Trust organizations         Manual deployment     Device enrollment permissions     WARP with firewall     WARP with legacy VPN            Configure WARP         Overview     Device profiles        WARP modes         Overview     Enable Device Information Only            WARP settings         Overview     Captive portal detection         Managed networks        Route traffic         Overview     Local Domain Fallback     Split Tunnels     WARP architecture         WARP sessions            Troubleshoot WARP         Overview     Common issues     Client errors     Diagnostic logs     Known limitations         Remove WARP            Agentless options         Overview        DNS            Locations         Add locations     DNS resolver IPs and hostnames         DNS over TLS (DoT)     DNS over HTTPS (DoH)         HTTP                    Applications         Overview        Add web applications         Overview        SaaS applications         Overview     Generic OIDC application Beta     Generic SAML application     Adobe Acrobat Sign     Area 1     Asana     Atlassian Cloud     AWS     Braintree     Coupa     Digicert     DocuSign     Dropbox     GitHub Enterprise Cloud     Google Cloud     Google Workspace     Grafana     Grafana Cloud     Greenhouse Recruiting     Hubspot     Ironclad     Jamf Pro     Miro     PagerDuty     Pingboard     Salesforce (OIDC)     Salesforce (SAML)     ServiceNow (OIDC)     ServiceNow (SAML)     Slack     Smartsheet     SparkPost     Tableau Cloud     Workday     Zendesk     Zoom         Self-hosted applications     Cloudflare dashboard SSO application            Non-HTTP applications         Overview     Add an infrastructure application New     Browser-rendered terminal        Client-side cloudflared         Overview     Enable automatic cloudflared authentication     Arbitrary TCP         Short-lived certificates (legacy)            Scan SaaS applications         Overview     Manage findings        Available integrations         Overview     Amazon Web Services (AWS) S3     Atlassian Confluence     Atlassian Jira     Bitbucket Cloud     Box     Dropbox     GitHub        Google Workspace         Overview     Google Drive     Gmail     Google Admin     Google Calendar            Microsoft 365         Overview     Admin Center     OneDrive     SharePoint     Outlook         Salesforce     ServiceNow     Slack         Scan for sensitive data     Troubleshoot integrations         Login page     Block page     Add bookmarks     App Launcher            Policies         Overview        Secure Web Gateway         Overview        Get started         DNS filtering     Network filtering     HTTP filtering            DNS policies         Overview     Common policies     Test DNS filtering     Timed DNS policies            Network policies         Overview     Common policies     Protocol detection     SSH proxy and command logs            HTTP policies         Overview     Common policies     TLS decryption     HTTP/3     Tenant control     AV scanning     File sandboxing     WebSocket traffic            Egress policies         Overview     Dedicated egress IPs         Resolver policies Beta     Global policies     Applications and app types     Domain categories     Identity-based policies     Block page     Order of enforcement     Lists     Proxy            Access         Overview     Manage Access policies     Require Purpose Justification     External Evaluation rules     Isolate self-hosted application     Application paths     Enforce MFA     Temporary authentication            Browser Isolation         Overview        Set up Browser Isolation         Get started     Clientless Web Isolation     Non-identity on-ramps         Isolation policies     Extensions     Accessibility     Browser Isolation with firewall     Known limitations            Data Loss Prevention         Overview        Scan HTTP traffic         Create DLP policies     Common policies     Logging options         Scan SaaS apps ↗        DLP profiles         Configure DLP profiles     Predefined profiles     Integration profiles     Profile settings         DLP datasets                Insights            Analytics         Shadow IT Discovery     Gateway analytics            Email monitoring         Overview     Search email     Phishing report     Phish submissions            Digital Experience Monitoring         Overview Beta     Fleet status        Tests         Overview     HTTP test     Traceroute test     View test results         Remote captures     Notifications            Logs         Overview     User logs     Access audit logs        Gateway activity logs         Overview     Manage PII         Tunnel audit logs     Posture logs     Logpush integration         Risk score            Email Security         Overview        Setup         Overview        Post-delivery deployment            API deployment         Overview     Set up with Microsoft 365            BCC/Journaling            BCC setup         Microsoft Exchange BCC setup            Journaling setup         Office 365 journaling setup     Manually add domains     Manage domains                        Directories         Overview        Manage Microsoft directories         Overview     Manage groups in your directory     Manage users in your directory         Manage Email Security directories            Detection settings         Overview     Allow policies     Blocked senders     Trusted domains     Impersonation registry     Additional detections         Auto-move events     PhishGuard     Outbound Data Loss Prevention (DLP)        Reference         How Email Security detects phish     Information about your domain     Dispositions and attributes                API and Terraform         Overview        Access API examples         Overview     Access group     Any valid service token     Authentication method     Common name     Country Code     Email     Email domain     Everyone     G Suite Group     GitHub™ Organization     IP range     Microsoft Entra Group     mTLS certificate     Okta Group     SAML Attribute     Service token            Gateway API examples         Overview     DNS policy     Network policy     HTTP policy         Scoped API tokens     Terraform         Reference architecture ↗     Tutorials     Account limits     Roles and permissions     Glossary        Changelog         Overview     Access     Browser Isolation     CASB     Cloudflare Tunnel     Data Loss Prevention     Digital Experience Monitoring     Email Security     Gateway     Risk score     Zero Trust WARP Client         FAQ       \n\t\t(() => {\n\t\t\tconst scroller = document.getElementById('starlight__sidebar');\n\t\t\tif (!window._starlightScrollRestore || !scroller) return;\n\t\t\tscroller.scrollTop = window._starlightScrollRestore;\n\t\t\tdelete window._starlightScrollRestore;\n\t\t})();\n\t        Products  Learning  Status  Support  Log in   GitHub X YouTube       Select theme    DarkLightAuto        \n\tStarlightThemeProvider.updatePickers();\n            const a=document.getElementById(\"starlight__sidebar\"),n=a?.querySelector(\"sl-sidebar-state-persist\"),o=\"sl-sidebar-state\",i=()=>{let t=[];const e=n?.dataset.hash||\"\";try{const s=sessionStorage.getItem(o),r=JSON.parse(s||\"{}\");Array.isArray(r.open)&&r.hash===e&&(t=r.open)}catch{}return{hash:e,open:t,scroll:a?.scrollTop||0}},c=t=>{try{sessionStorage.setItem(o,JSON.stringify(t))}catch{}},d=()=>c(i()),l=(t,e)=>{const s=i();s.open[e]=t,c(s)};n?.addEventListener(\"click\",t=>{if(!(t.target instanceof Element))return;const e=t.target.closest(\"summary\")?.closest(\"details\");if(!e)return;const s=e.querySelector(\"sl-sidebar-restore\"),r=parseInt(s?.dataset.index||\"\");isNaN(r)||l(!e.open,r)});addEventListener(\"visibilitychange\",()=>{document.visibilityState===\"hidden\"&&d()});addEventListener(\"pageHide\",d);    On this page    Overview     Download the Cloudflare root certificate     Verify the downloaded certificate     Convert the certificate        Add the certificate to operating systems     macOS     Windows     Linux     iOS     Android     ChromeOS        Add the certificate to applications     Browsers     Mobile device management (MDM) software     Python     Git     npm     Docker     Google Cloud     AWS CLI     PHP Composer     JetBrains     Eclipse     RubyGems     Minikube        On this page   Overview     Download the Cloudflare root certificate     Verify the downloaded certificate     Convert the certificate        Add the certificate to operating systems     macOS     Windows     Linux     iOS     Android     ChromeOS        Add the certificate to applications     Browsers     Mobile device management (MDM) software     Python     Git     npm     Docker     Google Cloud     AWS CLI     PHP Composer     JetBrains     Eclipse     RubyGems     Minikube            Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!           The default global Cloudflare root certificate will expire on 2025-02-02. If you installed the default Cloudflare certificate before 2024-10-17, you must generate a new certificate and activate it for your Zero Trust organization to avoid inspection errors.         Products        …       Cloudflare Zero Trust        Connections        Connect devices        WARP        User-side certificates        Install certificate manually        {\"@context\":\"https://schema.org\",\"@type\":\"BreadcrumbList\",\"itemListElement\":[{\"@type\":\"ListItem\",\"position\":1,\"item\":{\"@id\":\"/products/\",\"name\":\"Products\"}},{\"@type\":\"ListItem\",\"position\":2,\"item\":{\"@id\":\"/cloudflare-one/\",\"name\":\"Cloudflare Zero Trust\"}},{\"@type\":\"ListItem\",\"position\":3,\"item\":{\"@id\":\"/cloudflare-one/connections/\",\"name\":\"Connections\"}},{\"@type\":\"ListItem\",\"position\":4,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-devices/\",\"name\":\"Connect devices\"}},{\"@type\":\"ListItem\",\"position\":5,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-devices/warp/\",\"name\":\"WARP\"}},{\"@type\":\"ListItem\",\"position\":6,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-devices/warp/user-side-certificates/\",\"name\":\"User-side certificates\"}},{\"@type\":\"ListItem\",\"position\":7,\"item\":{\"@id\":\"/cloudflare-one/connections/connect-devices/warp/user-side-certificates/manual-deployment/\",\"name\":\"Install certificate manually\"}}]} class t extends HTMLElement{constructor(){super(),this.isManualToggle=!1,this.breadcrumbs=null,this.mainBemClass=null,this.totalWidth=0,this.resizeObserver=null,this.handleTruncatedButtonClick=()=>{this.breadcrumbs?.classList.remove(\"is-truncated\"),this.isManualToggle=!0},this.mainBemClass=this.dataset.mainBemClass||null;const e=this.dataset.id;!(\"truncated\"in this.dataset)||!e||(this.breadcrumbs=document.getElementById(e),this.initializeCrumbs(),this.setupResizeObserver())}initializeCrumbs(){this.breadcrumbs?.querySelectorAll(`.${this.mainBemClass}__crumb`)?.forEach(s=>{this.totalWidth+=s.offsetWidth})}setupResizeObserver(){this.resizeObserver=new ResizeObserver(e=>{e.forEach(s=>{this.checkOverflow(s.target.clientWidth)})}),this.breadcrumbs&&this.resizeObserver.observe(this.breadcrumbs)}connectedCallback(){this.showHiddenCrumbs()}disconnectedCallback(){this.resizeObserver&&this.breadcrumbs&&(this.resizeObserver.unobserve(this.breadcrumbs),this.resizeObserver.disconnect())}toggleTruncated(e){this.breadcrumbs?.classList.toggle(\"is-truncated\",e)}showHiddenCrumbs(){const e=this.breadcrumbs?.querySelector(`.${this.mainBemClass}__truncated-button`);e?.removeEventListener(\"click\",this.handleTruncatedButtonClick),e?.addEventListener(\"click\",this.handleTruncatedButtonClick.bind(this))}checkOverflow(e){const s=this.totalWidth>e&&!this.isManualToggle;this.toggleTruncated(s),s||(this.isManualToggle=!1)}}customElements.get(\"astro-breadcrumbs\")||customElements.define(\"astro-breadcrumbs\",t);Install certificate manually                             const L=\"starlight-image-zoom-zoomable\",w=window.requestIdleCallback??(y=>setTimeout(y,1));customElements.define(\"starlight-image-zoom\",class f extends HTMLElement{#t;#i=[];#o;#s=this.querySelector(\"template\");#e={image:\"starlight-image-zoom-image\",opened:\"starlight-image-zoom-opened\",source:\"starlight-image-zoom-source\",transition:\"starlight-image-zoom-transition\"};#r=\"zoomTransform\";static#u=!1;constructor(){super();const t=()=>{w(()=>{const e=[...document.querySelectorAll(L)];e.length!==0&&(this.#m(e),document.addEventListener(\"click\",this.#d),window.addEventListener(\"resize\",this.#a))})};window.addEventListener(\"DOMContentLoaded\",t,{once:!0}),document.addEventListener(\"astro:after-preparation\",()=>{document.removeEventListener(\"click\",this.#d),window.removeEventListener(\"resize\",this.#a)},{once:!0}),f.#u||=document.addEventListener(\"astro:after-swap\",t)===void 0}#m(t){for(const e of t){const n=e.querySelector(\"img\");n&&(this.#i.push(n),e.querySelector(\"button\")?.addEventListener(\"click\",i=>{i.stopPropagation(),this.#l(n)}))}}#d=({target:t})=>{if(!(t instanceof HTMLElement&&t.closest(\"figcaption\"))){if(this.#t){this.#n();return}t instanceof HTMLImageElement&&this.#i.includes(t)&&this.#l(t)}};#a=()=>{this.#n(!0)};#c=()=>{this.#n()};#p=t=>{t.preventDefault(),this.#n()};#l(t){if(!this.#s||this.#t)return;this.#o=document.activeElement;const e=document.createElement(\"div\");e.append(this.#s.content.cloneNode(!0));const n=e.querySelector(\"dialog\"),i=n?.querySelector(\"figure\");if(!n||!i)return;const r={overflow:document.body.style.overflow,width:document.body.style.width},d=document.body.clientWidth;document.body.style.overflow=\"hidden\",document.body.style.width=`${d}px`,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",`calc(var(--sl-nav-pad-x) + ${window.innerWidth-d}px)`);const s=this.#f(t);t.classList.add(this.#e.source),s.classList.add(this.#e.image),i.append(s),this.#w(t.getAttribute(\"alt\"),i),document.body.append(e),document.addEventListener(\"wheel\",this.#c,{once:!0}),n.addEventListener(\"cancel\",this.#p),n.showModal(),w(()=>{s.style.transform=\"\",document.body.classList.add(this.#e.opened)}),this.#t={body:r,dialog:n,image:t,zoomedImage:s}}#n(t=!1){if(window.removeEventListener(\"wheel\",this.#c),!this.#t)return;const{zoomedImage:e}=this.#t;e.style.transform=e.dataset[this.#r]??\"\",document.body.classList.add(this.#e.transition),document.body.classList.remove(this.#e.opened);const{matches:n}=window.matchMedia(\"(prefers-reduced-motion: reduce)\");t||n?this.#h():e.addEventListener(\"transitionend\",this.#h,{once:!0})}#h=()=>{if(!this.#t)return;const{dialog:t,image:e}=this.#t;document.body.classList.remove(this.#e.transition),e.classList.remove(this.#e.source),t.parentElement?.remove(),document.body.style.overflow=this.#t.body.overflow,document.body.style.width=this.#t.body.width,document.querySelector(\"header\")?.style.setProperty(\"padding-inline-end\",\"var(--sl-nav-pad-x)\"),this.#t=void 0,this.#o instanceof HTMLElement&&this.#o.focus()};#w(t,e){if(Object.hasOwn(this.dataset,\"hideCaption\")||(t=t?.trim()??\"\",t.length===0))return;const n=document.createElement(\"figcaption\");n.ariaHidden=\"true\",n.textContent=t,e.append(n)}#f(t){const e=t.getBoundingClientRect(),n=this.#y(t),i=n?window.innerWidth:t.naturalWidth,r=n?window.innerHeight:t.naturalHeight,d=Math.min(window.innerWidth,i),s=Math.min(window.innerHeight,r),l=Math.min(d/i,s/r),a=(n?window.innerWidth:t.naturalWidth)*l,c=(n?window.innerHeight:t.naturalHeight)*l,h=(window.innerHeight-c)/2,u=(window.innerWidth-a)/2,o=t.cloneNode(!0);o.removeAttribute(\"id\"),o.style.position=\"absolute\",o.style.width=`${a}px`,o.style.height=`${c}px`,o.style.top=`${h}px`,o.style.left=`${u}px`,o.style.transform=\"\";const m=e.width/a,p=e.height/c,g=(-u+(e.width-a)/2+e.left)/m,v=(-h+(e.height-c)/2+e.top)/p;return o.style.transform=`scale(${m}, ${p}) translate3d(${g}px, ${v}px, 0)`,o.dataset[this.#r]=o.style.transform,t.parentElement?.tagName===\"PICTURE\"&&t.currentSrc&&(o.src=t.currentSrc),o}#y(t){return t.currentSrc.toLowerCase().endsWith(\".svg\")}});  NoteThis procedure is only required to enable specific Cloudflare Zero Trust features, and should only be done at the direction of your IT department. This procedure is not required to enable the WARP client for consumers.\nIf your device does not support certificate installation via WARP, you can manually install a Cloudflare certificate. You must add the certificate to both the system keychain and to individual application stores. These steps must be performed on each new device that is to be subject to HTTP filtering.\nDownload the Cloudflare root certificate\nDownload limitationYou can only download certificates from the Zero Trust dashboard.\nFirst, generate and download a Cloudflare certificate. The certificate is available in both .pem and .crt file format. Certain applications require the certificate to be in a specific file type, so ensure you download the most appropriate file for your use case.\n\nIn Zero Trust ↗, go to Settings > Resources.\nIn Certificates, select Manage.\nSelect the certificate you want to download.\nDepending on which format you want, choose Download .pem and/or Download .crt.\n\nVerify the downloaded certificate\nTo verify your download, use a terminal to check that the downloaded certificate's hash matches the thumbprint listed under Certificate thumbprint. For example:\nSHA1\nSHA1 .crt exampleopenssl x509 -noout -fingerprint -sha1 -inform der -in <certificate.crt>\n.expressive-code:has(figure.code-output){margin-top:0 !important}.expressive-code .code-output .copy{display:none !important}.expressive-code .code-output > pre{border-top-width:0 !important;background:var(--sl-color-gray-6) !important}.expressive-code .code-output > pre > code{user-select:none;transition:opacity 0.5s ease}.expressive-code .code-output > pre > code:hover{cursor:default;opacity:0.5}SHA1 Fingerprint=BB:2D:B6:3D:6B:DE:DA:06:4E:CA:CB:40:F6:F2:61:40:B7:10:F0:6C\nSHA1 .pem exampleopenssl x509 -noout -fingerprint -sha1 -inform pem -in <certificate.pem>\nSHA1 Fingerprint=BB:2D:B6:3D:6B:DE:DA:06:4E:CA:CB:40:F6:F2:61:40:B7:10:F0:6C\nSHA256\nSHA256 .crt exampleopenssl x509 -noout -fingerprint -sha256 -inform der -in <certificate.crt>\nsha256 Fingerprint=F5:E1:56:C4:89:78:77:AD:79:3A:1E:83:FA:77:83:F1:9C:B0:C6:1B:58:2C:2F:50:11:B3:37:72:7C:62:3D:EF\nSHA256 .pem exampleopenssl x509 -noout -fingerprint -sha256 -inform pem -in <certificate.pem>\nsha256 Fingerprint=F5:E1:56:C4:89:78:77:AD:79:3A:1E:83:FA:77:83:F1:9C:B0:C6:1B:58:2C:2F:50:11:B3:37:72:7C:62:3D:EF\nConvert the certificate\nSome applications require a certificate formatted in the .cer file type. You can convert your downloaded certificate using OpenSSL ↗:\n       macOS and Linux      Windows      \nInstall OpenSSL ↗.\nDownload a Cloudflare certificate in .pem format.\nIn a terminal, convert the certificate to DER format with the .cer file type:\nTerminal windowopenssl x509 -inform PEM -in ~/Downloads/certificate.pem -outform DER -out ~/Downloads/certificate.cer\n\n  \nInstall OpenSSL for Windows ↗.\nDownload a Cloudflare certificate in .pem format.\nIn a PowerShell terminal, convert the certificate to DER format with the .cer file type:\nPowerShellopenssl x509 -inform PEM -in \"$HOME\\Downloads\\certificate.pem\" -outform DER -out \"$HOME\\Downloads\\certificate.cer\"\n\n     class r extends HTMLElement{static#e=new Map;#t;#n=\"starlight-synced-tabs__\";constructor(){super();const t=this.querySelector('[role=\"tablist\"]');if(this.tabs=[...t.querySelectorAll('[role=\"tab\"]')],this.panels=[...this.querySelectorAll(':scope > [role=\"tabpanel\"]')],this.#t=this.dataset.syncKey,this.#t){const i=r.#e.get(this.#t)??[];i.push(this),r.#e.set(this.#t,i)}this.tabs.forEach((i,c)=>{i.addEventListener(\"click\",e=>{e.preventDefault();const n=t.querySelector('[aria-selected=\"true\"]');e.currentTarget!==n&&this.switchTab(e.currentTarget,c)}),i.addEventListener(\"keydown\",e=>{const n=this.tabs.indexOf(e.currentTarget),s=e.key===\"ArrowLeft\"?n-1:e.key===\"ArrowRight\"?n+1:e.key===\"Home\"?0:e.key===\"End\"?this.tabs.length-1:null;s!==null&&this.tabs[s]&&(e.preventDefault(),this.switchTab(this.tabs[s],s))})})}switchTab(t,i,c=!0){if(!t)return;const e=c?this.getBoundingClientRect().top:0;this.tabs.forEach(s=>{s.setAttribute(\"aria-selected\",\"false\"),s.setAttribute(\"tabindex\",\"-1\")}),this.panels.forEach(s=>{s.hidden=!0});const n=this.panels[i];n&&(n.hidden=!1),t.removeAttribute(\"tabindex\"),t.setAttribute(\"aria-selected\",\"true\"),c&&(t.focus(),r.#r(this,t),window.scrollTo({top:window.scrollY+(this.getBoundingClientRect().top-e)}))}#i(t){!this.#t||typeof localStorage>\"u\"||localStorage.setItem(this.#n+this.#t,t)}static#r(t,i){const c=t.#t,e=r.#s(i);if(!c||!e)return;const n=r.#e.get(c);if(n){for(const s of n){if(s===t)continue;const a=s.tabs.findIndex(o=>r.#s(o)===e);a!==-1&&s.switchTab(s.tabs[a],a,!1)}t.#i(e)}}static#s(t){return t.textContent?.trim()}}customElements.define(\"starlight-tabs\",r);\nAdd the certificate to operating systems\nmacOS\nIn macOS, you can choose the keychain in which you want to install the certificate. Each keychain impacts which users will be affected by trusting the root certificate.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeychainAccess scopeloginThe logged in userLocal ItemsUsers with access to cached iCloud passwordsSystemAll users on the system\nTo install a Cloudflare certificate in macOS, you can use either the Keychain Access application or a terminal. Both methods require you to download a certificate in .crt format.\n      Keychain Access     Terminal      \nDownload a Cloudflare certificate.\nOpen the .crt file in Keychain Access. If prompted, enter your local password.\nIn Keychain, choose the access option that suits your needs and select Add.\nIn the list of certificates, locate the newly installed certificate. Keychain Access will mark this certificate as not trusted. Right-click the certificate and select Get Info.\nSelect Trust. Under When using this certificate, select Always Trust.\nThe root certificate is now installed and ready to be used.  \nDownload a Cloudflare certificate.\nOpen Terminal.\nAdd the certificate to your keychain:\nTerminal windowsudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain <path-to-certificate.crt>This keychain will allow all users on the system access to the certificate. If you want to install the certificate to a different keychain, replace System.keychain with the name of that keychain.\nUpdate the OpenSSL CA Store to include the Cloudflare certificate:\nTerminal windowecho | sudo tee -a /etc/ssl/cert.pem < certificate.pemThe root certificate is now installed and ready to be used.     \nChange certificate access scopeIf you want to change user access to the Cloudflare certificate, you can open Keychain Access and move the certificate to a different keychain on the left sidebar.\nWindows\nWindows offers two locations to install the certificate, each impacting which users will be affected by trusting the root certificate.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nStore locationAccess scopeCurrent User StoreThe logged in userLocal Machine StoreAll users on the system\n\nDownload a Cloudflare certificate.\nRight-click the certificate file.\nSelect Open. If a security warning appears, choose Open to proceed.\nThe Certificate window will appear. Select Install Certificate.\nNow choose a Store Location. If a security warning appears, choose Yes to proceed.\nOn the next screen, select Browse.\nIn the list, choose the Trusted Root Certification Authorities store.\nSelect OK, then select Finish.\n\nThe root certificate is now installed and ready to be used.\nLinux\nThe location where the root certificate should be installed is different depending on your Linux distribution. Follow the specific instructions for your distribution.\nDebian-based distributions\nThe following procedure applies to Debian-based systems, such as Debian, Ubuntu, and Kali Linux.\n\n\nDownload a Cloudflare certificate in .pem format.\n\n\nInstall the ca-certificates package.\nTerminal windowsudo apt-get install ca-certificates\n\n\nCopy the certificate to the system, changing the file extension to .crt.\nTerminal windowsudo cp certificate.pem /usr/share/ca-certificates/certificate.crt\n\n\nImport the certificate.\nTerminal windowsudo dpkg-reconfigure ca-certificates\n\n\nRed Hat-based distributions\nThe following procedure applies to Red Hat-based systems, such as CentOS and Red Hat Enterprise Linux (RHEL).\n\n\nDownload a Cloudflare certificate in both .crt and .pem format.\n\n\nInstall the ca-certificates package.\nTerminal windowsudo dnf install ca-certificates\n\n\nCopy both certificates to the trust store.\nTerminal windowsudo cp certificate.crt certificate.pem /etc/pki/ca-trust/source/anchors\n\n\nImport the certificate.\nTerminal windowsudo update-ca-trust\n\n\nNixOS\nNixOS does not use the system certificate store for self updating and instead relies on the certificates found in ~/.nix-profile/etc/ssl/certs or provided by NIX_SSL_CERT_FILE at runtime.\niOS\n\nIn Safari, download a Cloudflare certificate in .pem format.\nOpen Files and go to Recents.\nFind and open the downloaded certificate file. A message will appear confirming the profile was downloaded. Select Close.\nOpen Settings. Select the Profile Downloaded section beneath your Apple Account info. Alternatively, go to General > VPN & Device Management and select the Gateway CA - Cloudflare Managed G1 profile.\nSelect Install. If the iOS device is passcode-protected, you will be prompted to enter the passcode.\nA certificate warning will appear. Select Install. If a second prompt appears, select Install again.\nThe Profile Installed screen will appear. Select Done. The certificate is now installed. However, before it can be used, it must be trusted by the device.\nIn Settings, go to General > About > Certificate Trust Settings. The installed root certificates will be displayed under Enable full trust for root certificates.\nTurn on the Cloudflare certificate.\nA security warning message will appear. Choose Continue.\n\nThe root certificate is now installed and ready to be used.\nAndroid\n\nDownload a Cloudflare certificate.\nIn Settings, go to Security > Advanced > Encryption & credentials > Install a certificate.\nSelect CA certificate.\nSelect Install anyway.\nVerify your identity.\nChoose the certificate file you want to install.\n\nThe root certificate is now installed and ready to be used.\nChromeOS\nChromeOS devices use different methods to store and deploy root certificates. Certificates may fall under the VPN and apps or CA certificate settings. Follow the procedure that corresponds with your device.\n      VPN and apps     CA certificate      \n\nDownload a Cloudflare certificate in .crt format.\n\n\nGo to Settings > Apps > Google Play Store.\n\n\nSelect Manage Android preferences.\n\n\nGo to Security & location > Credentials > Install from SD card.\n\n\nIn the file open dialog, choose the certificate.crt file you downloaded. Select Open.\nEnter a name to identify the certificate. Ensure Credential use is set to VPN and apps.\nSelect OK.\n  \n\nDownload a Cloudflare certificate in .crt format.\n\n\nGo to Settings > Apps > Google Play Store.\n\n\nSelect Manage Android preferences.\n\n\nGo to Security & location > Credentials > Install a certificate > CA certificate.\n\n\nWhen prompted with a privacy warning, select Install anyway.\nIn the file open dialog, choose the certificate.crt file you downloaded. Select Open.\nTo verify the certificate is installed and trusted, go to Settings > Apps > Google Play Store > Manage Android Preferences > Security > Credentials > Trusted credentials > User.\n     \nAfter adding the Cloudflare certificate to ChromeOS, you may also have to install the certificate in your browser.\nAdd the certificate to applications\nSome packages, development tools, and other applications provide options to trust root certificates that will allow for the traffic inspection features of Gateway to work without breaking the application.\nAll of the applications below first require downloading a Cloudflare certificate with the instructions above. On macOS, the default path to the system keychain database file is /Library/Keychains/System.keychain. On Windows, the default path is \\Cert:\\CurrentUser\\Root.\nNoteSome applications require the use of a publicly trusted certificate — they do not trust the system certificate, nor do they have a configurable private store. For these applications to function, you must add a Do Not Inspect policy for the domains or IPs that the application relies on.\nBrowsers\nChrome\nVersions of Chrome before Chrome 113 use the operating system root store ↗ on macOS and Windows. Chrome 113 and newer on macOS and Windows -- and all versions on Linux and ChromeOS -- use the Chrome internal trust store ↗.\nTo install a Cloudflare certificate to Chrome manually:\n\nDownload a Cloudflare certificate in .pem format.\nIn Chrome, go to Settings > Privacy and security > Security.\nSelect Manage certificates.\nGo to Authorities. Select Import.\nIn the file open dialog, choose the certificate.pem file you downloaded.\nIn the dialog box, turn on Trust this certificate for identifying websites, Trust this certificate for identifying email users, and Trust this certificate for identifying software makers. Select OK.\nTo verify the certificate was installed and trusted, locate it in Authorities.\n\nFor information on installing a Cloudflare certificate for organizations, refer to Google's Chrome Enterprise and Education documentation ↗.\nFirefox\nTo install a Cloudflare certificate to Firefox manually:\n\nDownload a Cloudflare certificate in .pem format.\nIn Firefox, go to Settings > Privacy & Security.\nIn Security, select Certificates > View Certificates.\nIn Authorities, select Import.\nIn the file open dialog, choose the certificate.pem file you downloaded.\nIn the dialog box, turn on Trust this CA to identify websites and Trust this CA to identify email users. Select OK.\nTo verify the certificate was installed and trusted, locate it in the table under Cloudflare.\n\nFor information on installing a Cloudflare certificate for organizations, refer to this Mozilla support article ↗.\nMobile device management (MDM) software\nZero Trust integrates with several mobile device management (MDM) software partners to deploy WARP across devices.\nMicrosoft Intune\nTo upload and deploy a Cloudflare certificate in Microsoft Intune:\n\nDownload and convert a Cloudflare certificate to DER format with the .cer file type.\nIn Microsoft Intune, create a trusted certificate profile ↗ with your converted certificate.\n\nFor more information, refer to the Microsoft documentation ↗.\nJamf Pro\nTo upload and deploy a Cloudflare certificate in Jamf Pro:\n\nDownload and convert a Cloudflare certificate to DER format with the .cer file type.\nIn Jamf Pro, go to Computers > Configuration Profiles to create a computer configuration profile, or go to Devices > Configuration Profiles to create a mobile device configuration profile. Select New.\nAdd a name and description for the profile.\nChoose whether you would like Jamf to install the certificate automatically or with self-service, and whether you would like to install the certificate for a single user or all users on the device.\nSelect Add > Certificate. Choose the certificate file.\nUncheck Allow export from keychain.\nSelect Scope, then choose which devices or groups to deploy the certificate to.\nSelect Save.\n\nFor more information, refer to the Jamf Pro documentation ↗.\nKandji\nTo upload and deploy a Cloudflare certificate in Kandji:\n\nDownload a Cloudflare certificate in .crt format.\nIn Kandji, upload the certificate ↗ as a PKCS #1-formatted certificate.\n\nHexnode\nTo upload and deploy a Cloudflare certificate in Hexnode:\n\nDownload a Cloudflare certificate in .pem format.\nIn Hexnode, follow the directions for adding the certificate to macOS ↗, iOS ↗, and/or Android ↗ devices.\n\nJumpCloud\nTo upload and deploy a Cloudflare certificate in JumpCloud:\n\nDownload a Cloudflare certificate in .pem format.\nIn JumpCloud, upload the certificate ↗.\nConfigure a conditional access policy ↗ to deploy the certificate across devices.\n\nPython\nDepending on which version of Python you have installed and your configuration, you may need to use either the python or python3 command. If you use virtual environments ↗, you will need to repeat the following steps within each virtual environment.\nPython on Windows\nThe command to install the certificate with Python on Windows automatically includes pip and certifi (the default certificate bundle for certificate validation).\n\nDownload a Cloudflare certificate in .crt format.\nIn a PowerShell terminal, install the certifi package:\nPowerShellpython -m pip install certifi\n\nIdentify the Python CA store:\nPowerShell$CERT_PATH = python -c \"import certifi; print(certifi.where())\"\n\nUpdate the bundle to include the Cloudflare certificate:\nPowerShellgc \"$env:USERPROFILE\\Downloads\\certificate.crt\" | ac $CERT_PATH\n\n(Optional) Configure your system variables to point to the CA store by adding them to PowerShell's configuration file:\nPowerShell[System.Environment]::SetEnvironmentVariable('CERT_PATH', $CERT_PATH, 'Machine')[System.Environment]::SetEnvironmentVariable('SSL_CERT_FILE', $CERT_PATH, 'Machine')[System.Environment]::SetEnvironmentVariable('REQUESTS_CA_BUNDLE', $CERT_PATH, 'Machine')\n\nRestart your terminal.\n\nPython on Mac and Linux\n\nDownload a Cloudflare certificate in .pem format.\nIn a terminal, install the certifi package:\nTerminal windowpython -m pip install certifi\n\nAppend the Cloudflare certificate to this CA store by running:\nTerminal windowecho | cat - certificate.pem >> $(python -m certifi)\n\n(Optional) Configure your system variables to point to the CA store by adding them to your shell's configuration file (such as ~/.zshrc or ~/.bash_profile). For example:\nTerminal windowecho 'export CERT_PATH=$(python -c \"import certifi; print(certifi.where())\")export SSL_CERT_FILE=${CERT_PATH}export REQUESTS_CA_BUNDLE=${CERT_PATH}' >> ~/.zshrc\n\nRestart your terminal.\n\nGit\nGit on Windows\n\n\nOpen PowerShell.\n\n\nRun the following command:\nPowerShellgit config -l\nThis command will output:\ncore.symlinks=falsecore.autocrlf=truecore.fscache=truecolor.diff=autocolor.status=autocolor.branch=autocolor.interactive=truehelp.format=htmlrebase.autosquash=truehttp.sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crthttp.sslbackend=openssldiff.astextplain.textconv=astextplainfilter.lfs.clean=git-lfs clean -- %ffilter.lfs.smudge=git-lfs smudge -- %ffilter.lfs.process=git-lfs filter-processfilter.lfs.required=truecredential.helper=manager\n\n\nThe http.sslcainfo defines the CA Certificate store. To append the Cloudflare certificate to the CA bundle, update http.sslcainfo.\nPowerShellgc .\\certificate.pem | ac $(git config --get http.sslcainfo)\n\n\nGit on Mac and Linux\nTo configure Git to trust a Cloudflare certificate, run the following command:\nTerminal windowgit config --global http.sslcainfo [PATH_TO_CLOUDFLARE_CERT]\nnpm\n\nDownload a Cloudflare certificate in .pem format.\nSet the cafile configuration to use the Cloudflare certificate:\nTerminal windownpm config set cafile [PATH_TO_CLOUDFLARE_CERT.pem]\n\n\nOn some systems you may need to set the following in your path/export list:\nTerminal windowexport NODE_EXTRA_CA_CERTS='[PATH_TO_CLOUDFLARE_CERT.pem]'\nDocker\nTo install a certificate for use in a Docker container:\n\n\nDownload a Cloudflare certificate in .pem format.\n\n\nCreate a directory for certificates in your Docker project:\nTerminal windowcd docker-projectmkdir certsmv /path/to/downloaded/certificate.pem certs/\n\n\nVerify the certificate was moved to the directory correctly. Your project should have the following structure:\nTerminal windowdocker-project/├── Dockerfile└── certs/    └── certificate.pem\n\n\nAdd the certificate to your Docker image:\n      During build process     During runtime      To add the certificate to your Dockerfile to install it during the build process:\n\nAdd the certificate install directions to your Dockerfile. For example:\nRed Hat-based imagesFROM registry.access.redhat.com/ubi9/ubi:latest# Or FROM centos:7 or FROM fedora:38\n# Install necessary certificates packageRUN dnf install -y ca-certificates\n# Copy and add Cloudflare root certificateCOPY certs/certificate.pem /etc/pki/ca-trust/source/anchors/certificate.crtRUN update-ca-trust extract\nDebian-based imagesFROM debian:12# Or FROM ubuntu:22.04\n# Install necessary certificates packageRUN apt-get update && apt-get install -y ca-certificates\n# Copy and add Cloudflare root certificateCOPY certs/certificate.pem /usr/local/share/ca-certificates/certificate.crtRUN update-ca-certificates\nAlpine-based imagesFROM alpine:3.18\n# Install necessary certificates packageRUN apk add --no-cache ca-certificates\n# Copy and add Cloudflare root certificateCOPY certs/certificate.pem /usr/local/share/ca-certificates/certificate.crtRUN update-ca-certificates\n\n\nBuild the Docker image:\nTerminal windowdocker build -t <your-container-name> .\n\n\nVerify the certificate was installed:\nRed Hat-based imagesdocker run --rm your-image-name sh -c \"cat /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem | grep Cloudflare\"\nDebian and Alpine-based imagesdocker run --rm your-image-name sh -c \"cat /etc/ssl/certs/certificate.pem\"\n\n  To add the certificate to your Docker Compose file to install it during runtime:\n\nAdd the certificate install directions to your docker-compose.yml file. For example:\nRed Hat-based containersversion: '3'services:  redhat-app:    image: registry.access.redhat.com/ubi9/ubi:latest     volumes:       - certs/certificate.pem:/etc/pki/ca-trust/source/anchors/certificate.pem     entrypoint: /bin/sh -c \"dnf install -y ca-certificates && update-ca-trust extract && app start\"\nDebian-based containersversion: '3'services:  debian-app:    image: debian:12     volumes:       - certs/certificate.pem:/usr/local/share/ca-certificates/certificate.crt     entrypoint: /bin/sh -c \"apt-get update && apt-get install -y ca-certificates && update-ca-certificates && app start\"\nAlpine-based containersversion: '3'services:  alpine-app:    image: alpine:3.18     volumes:       - certs/certificate.pem:/usr/local/share/ca-certificates/certificate.pem     entrypoint: /bin/sh -c \"apk add --no-cache ca-certificates && update-ca-certificates && app start\"\n\n\nRun the container:\nTerminal windowdocker-compose up\n\n\nVerify the certificate was installed:\nRed Hat-based containersdocker exec -it <container-name> sh -c \"cat /etc/pki/ca-trust/extracted/pem/tls-ca-bundle.pem | grep Cloudflare\"\nDebian and Alpine-based containersdocker exec -it <container-name> sh -c \"cat /etc/ssl/certs/ca-certificates.crt | grep Cloudflare\"\n\n     \n\n\nGoogle Cloud\nGoogle Cloud SDK\nThe commands below will set the Google Cloud SDK to use a Cloudflare certificate. For more information on configuring the Google Cloud SDK, refer to the Google Cloud documentation ↗.\n\n\nGet curl's cacert bundle.\nTerminal windowcurl --remote-name https://curl.se/ca/cacert.pem\n\n\nDownload a Cloudflare certificate in .pem format.\n\n\nCombine the certs into a single .pem file.\nTerminal windowcat cacert.pem certificate.pem > ~/ca.pem\n\n\nConfigure Google Cloud to use the combined .pem.\nTerminal windowgcloud config set core/custom_ca_certs_file ~/ca.pem\n\n\nNoteThe file at ~/ca.pem needs to remain in place in order for the gcloud utility to leverage it. If the file is moved, then you must re-run step 3 to point gcloud to the file's new location.\nKaniko\nIf you use Kaniko with Google Cloud SDK, you must install a Cloudflare certificate in the Kaniko CA store ↗. For more information, refer to the gcloud documentation ↗.\nGoogle Drive for desktop\nTo trust a Cloudflare root certificate in the Google Drive desktop application, follow the procedure for your operating system. These steps require you to download the .pem certificate.\n       macOS      Windows      \n\nIn the Finder menu bar, go to Go > Go to Folder. Enter /Applications/Google Drive.app/Contents/Resources.\n\n\nFind roots.pem and copy it to a permanent location, such as your Documents folder.\n\n\nAppend the contents of cloudflare.pem to the end of roots.pem.\nTerminal windowcat ~/Downloads/certificate.pem >> path/to/roots.pem\n\n\nApply the newly created root certificate to your Google Drive application.\nTerminal windowsudo defaults write /Library/Preferences/com.google.drivefs.settings TrustedRootCertsFile -string \"path/to/roots.pem\"\n\nYou can verify the update with the following command.Terminal windowdefaults read /Library/Preferences/com.google.drivefs.settings  \n\nIn File Explorer, go to \\Program Files\\Google\\Drive File Stream\\<version>\\config\\.\n\n\nFind roots.pem and copy it to a permanent location, such as your Documents folder.\n\n\nAppend the contents of cloudflare.pem to the end of roots.pem.\nPowerShellcat ~\\Downloads\\certificate.pem >> path\\to\\roots.pem\n\n\nUpdate the Google Drive registry key.\nPowerShellreg ADD \"HKEY_LOCAL_MACHINE\\Software\\Google\\DriveFS\" /v TrustedRootCertsFile /t REG_SZ /d \"path\\to\\roots.pem\"\n\nYou can verify the update with the following command.PowerShellreg QUERY \"HKEY_LOCAL_MACHINE\\Software\\Google\\DriveFS\" /v TrustedRootCertsFile\"     \nFor more information, refer to the Google documentation ↗ for the TrustedRootCertsFile setting.\nGoogle Apps Manager (GAM)\nGoogle Apps Manager (GAM) uses its own certificate store. To add a Cloudflare certificate to GAM, refer to the GAM documentation ↗.\nAWS CLI\nTo use a Cloudflare root certificate with AWS CLI, configure it in your AWS configuration files:\n      Global config     Environment variable      To persistently set the location of the certificate:\n\nDownload a Cloudflare certificate in .pem format.\n\n\nLocate and open your AWS configuration file ↗.\n\n\nConfigure the ca_bundle setting ↗ with the location of your certificate. For example:\n.aws\\config[default]region = us-west-1\nca_bundle = C:\\certificate.pem\n\n\nRestart your terminal.\n\n  To set the location of the certificate for use as an environment variable:\nDownload a Cloudflare certificate in .pem format.\nIn a terminal, set the AWS_CA_BUNDLE environment variable ↗ to the location of your certificate depending on your operating system.\nRestart your terminal.\n     \nPHP Composer\nThe command below will set the cafile ↗ configuration inside of composer.json to use the Cloudflare root certificate. Make sure to download the certificate in the .pem file type.\nTerminal windowcomposer config cafile [PATH_TO_CLOUDFLARE_CERT.pem]\nAlternatively, you can add this manually to your composer.json file under the config key.\nJetBrains\nTo install a Cloudflare root certificate on JetBrains products, refer to the links below:\n\nAppCode ↗\nCLion ↗\nDataGrip ↗\nDataSpell ↗\nGoLand ↗\nIntelliJ IDEA ↗\nPhpStorm ↗\nPyCharm ↗\nRider ↗\nWebStorm ↗\n\nEclipse\nTo install a Cloudflare root certificate on Eclipse IDE for Java Developers, you must add the certificate to the Java virtual machine (JVM) used by Eclipse.\n\n\nDownload a Cloudflare certificate.\n\n\nFind the java.home value for your Eclipse installation.\n\nIn Eclipse, go to Eclipse > About Eclipse (or Help > About Eclipse IDE on Windows and Linux)\nSelect Installation Details, then go to Configuration.\nSearch for java.home, then locate the value. For example:\n\n*** System properties:java.home=/Users/<username>/.p2/pool/plugins/org.eclipse.justj.openjdk.hotspot.jre.full.macosx.aarch64_17.0.8.v20230831-1047/jre\n\nCopy the full path after java.home=.\n\n\n\nAdd the Cloudflare certificate to Eclipse's JVM:\n\n\n       macOS and Linux      Windows      \n\nIn a terminal, add the java.home value you copied as an environment variable.\nTerminal windowexport JAVA_HOME=$(echo /path/to/java.home)\n\n\nRun keytool to install and trust the Cloudflare certificate.\nTerminal window\"$JAVA_HOME/bin/keytool\" -import -file ~/Downloads/certificate.crt -alias CloudflareRootCA -keystore \"$JAVA_HOME/lib/security/cacerts\" -storepass changeit -trustcacerts -noprompt\n\n\nRestart Eclipse.\n\n  \n\nIn a terminal, add the java.home value you copied as an environment variable.\nPowerShellset JAVA_HOME=\"\\path\\to\\java.home\"\n\n\nRun keytool to install and trust the Cloudflare certificate.\nPowerShell\"%JAVA_HOME%\\bin\\keytool.exe\" -import -file \"%UserProfile%\\Downloads\\Cloudflare_CA.crt\" -alias CloudflareRootCA -keystore \"%JAVA_HOME%\\lib\\security\\cacerts\" -storepass changeit -trustcacerts -noprompt\n\n\nRestart Eclipse.\n\n     \nFor more information on adding certificates to Eclipse with keytool, refer to IBM's documentation ↗.\nRubyGems\nTo trust a Cloudflare root certificate in RubyGems, follow the procedure for your operating system. These steps require you to download a .pem certificate.\n       macOS and Linux      Windows      \n\nInstall OpenSSL ↗.\n\n\nIn a terminal, format the Cloudflare certificate for Ruby.\nTerminal windowopenssl x509 -in ~/Downloads/certificate.pem -out ~/Downloads/ruby-root-ca.crt\n\n\nCreate a RubyGems certificate directory in your home folder.\nTerminal windowmkdir -p ~/.gem/ssl\n\n\nCopy the Cloudflare certificate to your RubyGems certificate store.\nTerminal windowcp ~/Downloads/ruby-root-ca.crt ~/.gem/ssl/rubygems.org.pem\n\n\nConfigure RubyGems to use the certificate.\nTerminal windowgem sources --add-trusted-cert ~/.gem/ssl/rubygems.org.pem\nAlternatively, add the following line to your RubyGems configuration file located in ~/.gemrc file to globally trust the certificate:\n:ssl_cert: ~/.gem/ssl/rubygems.org.pem\n\n\nRestart any terminal sessions.\n\n  \n\nInstall OpenSSL for Windows ↗.\n\n\nIn a PowerShell terminal, format the Cloudflare certificate for Ruby.\nPowerShellopenssl x509 -in %UserProfile%\\Downloads\\certificate.pem -out %UserProfile%\\Downloads\\ruby-root-ca.crt\n\n\nCreate a RubyGems certificate directory in your home folder.\nPowerShellmkdir -Force \"$env:USERPROFILE\\.gem\\ssl\"\n\n\nCopy the Cloudflare certificate to your RubyGems certificate store.\nPowerShellCopy-Item \"$env:USERPROFILE\\Downloads\\ruby-root-ca.crt\" \"$env:USERPROFILE\\.gem\\ssl\\rubygems.org.pem\"\n\n\nConfigure RubyGems to use the certificate.\nPowerShellgem sources --add-trusted-cert \"$env:USERPROFILE\\.gem\\ssl\\rubygems.org.pem\"\nAlternatively, add the following line to your RubyGems configuration file located in $HOME\\.gemrc to globally trust the certificate:\n:ssl_cert: C:/Users/<username>/.gem/ssl/rubygems.org.pem\n\n\nRestart any terminal sessions.\n\n     \nMinikube\nTo trust a Cloudflare root certificate in Minikube, refer to x509: certificate signed by unknown authority ↗.     Was this helpful?   Yes      No        What did you like?     Accurate    Easy to understand    Solved my problem    Helped me decide to use the product    Other        What went wrong?     Hard to understand    Incorrect information    Missing the information    Other        Thank you for helping improve Cloudflare's documentation!    class r extends HTMLElement{connectedCallback(){const d={'[data-icon=\"material-symbols:thumb-up-outline-rounded\"]':\"#feedback-yes\",'[data-icon=\"material-symbols:thumb-down-outline-rounded\"]':\"#feedback-no\"},s=this.querySelector(\"#feedback-thumbs\"),o=this.querySelector(\"#feedback-thanks\");if(!(!s||!o))for(const[i,n]of Object.entries(d))this.querySelector(i)?.addEventListener(\"click\",()=>{s.classList.add(\"hidden\");const e=this.querySelector(n);if(!e)return;e.classList.remove(\"hidden\");const a=e.querySelector(\"form\");a&&a.addEventListener(\"submit\",async c=>{c.preventDefault();const t=new FormData(c.target);t.set(\"page\",window.location.pathname),t.set(\"option\",n.split(\"-\")[1]),fetch(\"https://feedback.developers.cloudflare.com\",{method:\"POST\",body:t}),e.classList.add(\"hidden\"),o.classList.remove(\"hidden\")})})}}customElements.define(\"feedback-prompt\",r);       Edit page          Cloudflare DashboardDiscordCommunityLearning CenterSupport Portal\n\t\t\t\tfunction OptanonWrapper() {}\n\t\t\t  Cookie Settings",
  "custom_id": "DBPzbf59IpUqmOREs1VkSWJEuzUttsuomjHrARI1Wqmqlx6RVcNLGshooe1Irv1b"
}